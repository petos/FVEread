#!/bin/bash

source ~/.FVErc
source "$FVEBINDIR"/FVEcomFncs

function printHelp() {
	echo -e "usage: `basename $0` COMMAND
 Opts:
  --help|-h  -- Print this help message
  --all        Gen ALL 3 graphs
  --today      Gen today power graph
  --monthpower Gen monthly power graph 
  --monthtotal Gen monthly production graph
  --onoff      Gen overview of ON/OFF all devices
  --temperature  Gen temperature overview for the day
"
exit 0
}

function genOnOffDevicesGraphs() {
	> "$TMPDIR"/FVE.gn

grep -v ^\# "$OPTCFGFILE" | while read USELESS USELESS DEVICE MINCOMP MAXCOMP ; do
local DEVICEDATAFILE="$FVEDATADIR"/"$DEVICE"."$TIMEDATE_YYYYMM"

cat> "$TMPDIR"/FVE.gn << EOF
set timefmt "%Y%m%d%H%M"
set xdata time
set format x "%H:%M"
set title "Today on/off for device $DEVICE\nGenerated on `date +%H:%M`"

set xrange["$TIMEDATE_YYYYMMDD 00:00:00":"$TIMEDATE_YYYYMM`expr $( date +%d ) + 1` 23:59:59"]
set yrange[-0.1:1.1]

set terminal png small size 640,240
set output "$TMPDIR/fve.device.$DEVICE.png"

plot "$DEVICEDATAFILE" u 1:2 with lines title '$DEVICE'
EOF
	
	gnuplot "$TMPDIR"/FVE.gn 2>/dev/null
	
done
}

function genTodayPowerGraph() {
	> "$TMPDIR"/FVE.gn
	
cat> "$TMPDIR"/FVE.gn << EOF
set timefmt "%Y%m%d%H%M"
set xdata time
set format x "%H:%M"
set title "Today power\nGenerated on `date +%H:%M`"

set xrange["$TIMEDATE_YYYYMMDD 00:00:00":"$TIMEDATE_YYYYMM`expr $( date +%d ) + 1` 23:59:59"]

set terminal png
set output "$TMPDIR/fved.png"

plot "$HISTORYFILE" u 1:2 with lines title 'Raw production', "$HISTORYFILE" u 1:4 with lines title 'Avrg production', 1500 with lines title "1,5 kW", 3300 with lines title "3,3 kW"
EOF
	
	gnuplot "$TMPDIR"/FVE.gn 2>/dev/null
}


function genTodayTemperatureGraph() {
	> "$TMPDIR"/FVE.gn
	
cat> "$TMPDIR"/FVE.gn << EOF
set timefmt "%Y%m%d%H%M"
set xdata time
set format x "%H:%M"
set title "Temperature graph\nGenerated on `date +%H:%M`"

set xrange["$(date -d yesterday +"%Y%m%d%H:%M")":"$( date -d "now + 2 hour" +"%Y%m%d%H:%M" )"]

set terminal png
set output "$TMPDIR/fvet.png"

EOF

    if [ "$TOPTEMPID1" ]; then
        echo "plot \"$TEMPERATUREFILE\" u 1:2 with lines title '1st sensor', \"$TEMPERATUREFILE\" u 1:3 with lines title '2nd sensor' " >> "$TMPDIR"/FVE.gn
    else
        echo "plot \"$TEMPERATUREFILE\" u 1:2 with lines title 'Temperature' " >> "$TMPDIR"/FVE.gn
    fi 
	
	gnuplot "$TMPDIR"/FVE.gn 2>/dev/null
}



function genTodayPhaseGraph() {
	> "$TMPDIR"/FVE.gn

cat> "$TMPDIR"/FVE.gn << EOF
set timefmt "%Y%m%d%H%M"
set xdata time
set format x "%H:%M"
set title "Today power\nGenerated on `date +%H:%M`"

set xrange["$TIMEDATE_YYYYMMDD 00:00:00":"$TIMEDATE_YYYYMM`expr $( date +%d ) + 1` 23:59:59"]

set terminal png
set output "$TMPDIR/fvel.png"

plot "$HISTORYFILE" u 1:5 with lines title 'L1', "$HISTORYFILE" u 1:6 with lines title 'L2', "$HISTORYFILE" u 1:7 with lines title 'L3', 500 with lines title "0,5 kW", 1100 with lines title "1,1 kW"
EOF

	gnuplot "$TMPDIR"/FVE.gn 2>/dev/null
}

function genMonthlyPowerGraph() {
	> "$TMPDIR"/FVE.gn
	
cat> "$TMPDIR"/FVE.gn << EOF
set timefmt "%Y%m%d%H%M"
set xdata time
set format x "%d/%m"
set title "Mothly power overview\nGenerated on `date +%d/%m/%Y`"

set terminal png
set output "$TMPDIR/fvem.png"

plot "$HISTORYFILE" u 1:2 with lines notitle
EOF
	gnuplot "$TMPDIR"/FVE.gn 2>/dev/null
}

function genMonthlyProductionGraph() {
	> "$TMPDIR"/FVE.gn
	
cat> "$TMPDIR"/FVE.gn << EOF
set timefmt "%Y%m%d"
set xdata time
set format x "%d/%m"
set title "Mothly production overview\nGenerated on `date +%d/%m/%Y`"
set boxwidth 0.8 relative
set style fill solid 1.0

set yrange [0:*]

set style data boxes

set terminal png
set output "$TMPDIR/fvep.png"

plot "$PRODUCTIONFILE" u 1:2 notitle with boxes
EOF
	
	gnuplot "$TMPDIR"/FVE.gn 2>/dev/null
}


if [ "$#" = 1 ]; then
	if [ "$1" = '-h' -o "$1" = "--help" ]; then
		printHelp
		exit
	elif [ "$1" = "--today" ]; then
		genTodayPowerGraph
	elif [ "$1" = "--phased" ]; then
		genTodayPhaseGraph
	elif [ "$1" = "--monthpower" ]; then
		genMonthlyPowerGraph
	elif [ "$1" = "--monthtotal" ]; then
		genMonthlyProductionGraph
	elif [ "$1" = "--onoff" ]; then
		genOnOffDevicesGraphs
	elif [ "$1" = "--temperature" ]; then
		genTodayTemperatureGraph
	elif [ "$1" = "--all" ]; then
		genTodayPowerGraph
		genTodayPhaseGraph
		genMonthlyPowerGraph
		genMonthlyProductionGraph
		genOnOffDevicesGraphs
	else
		errorPrint "Non supported parametr $1"
		exit 1
	fi
else
	printHelp
	exit
fi
#clean after
rm -f "$TMPDIR"/FVE.gn

