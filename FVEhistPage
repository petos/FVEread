#!/bin/bash

if [ -e $HOME/.FVErc ]; then 
	source $HOME/.FVErc
	FVErc="$HOME/.FVErc"
	source "$FVEBINDIR"/FVEcomFncs
elif [ -e /etc/FVErc ]; then
	source /etc/FVErc
	FVErc="/etc/FVErc"
	source "$FVEBINDIR"/FVEcomFncs
else
	FVErc="ERROR"
fi


TRIMMED=${FVEHTMLPOWERNAME%.html}
FVEPOWERNAMEHIST=$TRIMMED.$TIMEDATE_YYYYMMDD.html

TRIMMED=${FVEHTMLNAME%.html}
HISTFILENAME=$TRIMMED.$TIMEDATE_YYYYMMDD.html
HISTFILENAMETRIMMED=$TRIMMED

function printHelp() {
    echo -e "\nusage: FVEhistPage [OPTIONS]
    -v          talky output
    --debug     tells everything it knows

    -m|--month  will generate page for this month
    -y|--year   will generate page for this year
    --FVErc FILE Pass full path to FVErc file
    "
    exit 0
}


function makeHistFiles() {
    debugPrint "FNC: makeHistFiles"
    cp "$TMPDIR"/fved.png "$HISTDIR"/fved."$TIMEDATE_YYYYMMDD".png
    cp "$TMPDIR"/fvel.png "$HISTDIR"/fvel."$TIMEDATE_YYYYMMDD".png
    cp "$TMPDIR"/fvem.png "$HISTDIR"/fvem."$TIMEDATE_YYYYMM".png
    cp "$TMPDIR"/fvep.png "$HISTDIR"/fvep."$TIMEDATE_YYYYMM".png
    for FILE in "$TMPDIR"/fve.device.*.png; do 
	TRIMMED=${FILE%.png}
	cp $TRIMMED.png $HISTDIR/$(basename $TRIMMED."$TIMEDATE_YYYYMMDD".png)
    done

    cp "$TMPDIR"/"$FVEHTMLPOWERNAME" "$HISTDIR"/"$FVEPOWERNAMEHIST"

    debugPrint "FNC: makeHistFiles - done"
    return 0
}

function genDayPage() {
    debugPrint "FNC: genDayPage"
    makeHistFiles
    
   debugPrint "genDayPage: generating page" 	
cat > "$HISTDIR"/"$HISTFILENAME" << EOF
<!DOCTYPE html>
<html>
<head>
<title>FVE overview for $TIMEDATE_YYYYMMDD</title>
</head>

<body>

<iframe src="$FVEPOWERNAMEHIST" width="640" height="380"></iframe>


<h3>Graphs:</h3>
<h4>Power report for $TIMEDATE_YYYYMMDD:</h4>
<img src="fved.$TIMEDATE_YYYYMMDD.png" alt="Power today">
<h4>Power report (per phase) for $TIMEDATE_YYYYMMDD:</h4>
<img src="fvel.$TIMEDATE_YYYYMMDD.png" alt="Power today (phased)">
<h4>Month power overview for $TIMEDATE_YYYYMM:</h4>
<img src="fvem.$TIMEDATE_YYYYMM.png" alt="Power overview for $TIMEDATE_YYYYMM">
<h4>Produced on month for $TIMEDATE_YYYYMM:</h4>
<img src="fvep.$TIMEDATE_YYYYMM.png" alt="Produced in month $TIMEDATE_YYYYMM">

<h3>Optimalization of consumption</h3>
EOF

    grep -v ^\# "$OPTCFGFILE" | while read USELESS USELESS DEVICE USELESS ; do
    echo "<img src=\"fve.device.$DEVICE.$TIMEDATE_YYYYMMDD.png\" alt=\"Produced this month\"> " >> "$HISTDIR"/"$HISTFILENAME"
    echo '</br>' >> "$HISTDIR"/"$HISTFILENAME"
    done
    
    return 0
}

function uploadHistToFTP() {
    debugPrint "FNC: uploadHistToFTP"
    
    verbPrint "FTPupload of history files..."
    ( "$LOCALWEBSERVER" ) && sudo cp $HISTDIR/$HISTFILENAME $HISTDIR/$FVEPOWERNAMEHIST $HISTDIR/fvem*.png $HISTDIR/fvel*.png $HISTDIR/fve.device.*.png $HISTDIR/fvep.*.png $HISTDIR/fved.*.png "$LOCALWEBSERVERPATH"/fve.hist/
    ( "$REMOTEFTPSERVER" ) && lftp -u "$FTPUSERNAME",$FTPPASSWD -e "mput -O ${HTMLDESTDIR}/fve.hist/ $HISTDIR/$HISTFILENAME $HISTDIR/$FVEPOWERNAMEHIST $HISTDIR/fvem*.png $HISTDIR/fvel*.png $HISTDIR/fve.device.*.png $HISTDIR/fvep.*.png $HISTDIR/fved.*.png && bye" $HTMLSERVER >> /dev/null 
    verbPrint "FTPupload of history files DONE"
    
    if [ "$MAKEMTH" = "Y" ]; then
	verbPrint "FTPupload month file..."
	( "$LOCALWEBSERVER" ) && sudo cp ${HISTDIR}/${TIMEDATE_YYYYMM}.html "$LOCALWEBSERVERPATH"/fve.hist/
	( "$REMOTEFTPSERVER" ) && lftp -u "$FTPUSERNAME",$FTPPASSWD -e "mput -O ${HTMLDESTDIR}/fve.hist/ ${HISTDIR}/${TIMEDATE_YYYYMM}.html && bye" $HTMLSERVER >> /dev/null 
	verbPrint "FTPupload of month file DONE"
    fi
    if [ "$MAKEYEAR" = "Y" ]; then
	verbPrint "FTPuploading year file..."
	( "$LOCALWEBSERVER" ) && sudo cp ${HISTDIR}/${TIMEDATE_YYYY}.html "$LOCALWEBSERVERPATH"/fve.hist/
	( "$REMOTEFTPSERVER" ) && lftp -u "$FTPUSERNAME",$FTPPASSWD -e "mput -O ${HTMLDESTDIR}/fve.hist/ ${HISTDIR}/${TIMEDATE_YYYY}.html && bye" $HTMLSERVER >> /dev/null 
	verbPrint "FTPupload of year file DONE"
    fi
    return 0
}

function genMthPage() {
    verbPrint "Creating mth page: $HISTDIR/$TIMEDATE_YYYYMM.html"
    cat > "$HISTDIR"/"$TIMEDATE_YYYYMM".html << EOF
<!DOCTYPE html>
<html>
<head>
<title>FVE history for $TIMEDATE_YYYYMM</title>
</head>
<body>
EOF
    DAYSINMTH=$(date -d "$(date +%m)/1 + 1 month - 1 day" "+%d")
    for DAY in $(seq -w $DAYSINMTH); do
	local FILENAMELOC=${HISTFILENAMETRIMMED}.${TIMEDATE_YYYYMM}${DAY}.html
	echo "<a href=\"$FILENAMELOC\"> $FILENAMELOC </a></br> " >> "$HISTDIR"/"$TIMEDATE_YYYYMM".html
    done
cat >> "$HISTDIR"/"$TIMEDATE_YYYYMM".html << EOF
</body>
</html>
EOF
    return 0
}

function genYearPage() {
    cat > "$HISTDIR"/"$TIMEDATE_YYYY".html << EOF
<!DOCTYPE html>
<html>
<head>
<title>FVE history for $TIMEDATE_YYYY</title>
</head>
<body>
EOF
    for MTH in $(seq -w 12); do
	local FILENAMELOC=${TIMEDATE_YYYY}${MTH}.html
	echo "<a href=\"$FILENAMELOC\"> $FILENAMELOC </a></br> " >> "$HISTDIR"/"$TIMEDATE_YYYY".html
    done
cat >> "$HISTDIR"/"$TIMEDATE_YYYY".html << EOF
</body>
</html>
EOF
    return 0
}

function mainLoop() {
    genDayPage
    if [ "$MAKEMTH" = "Y" ]; then genMthPage; fi
    if [ "$MAKEYEAR" = "Y" ]; then genYearPage; fi
    uploadHistToFTP
    return 0
}

MAKEMTH=N
MAKEYEAR=N
if [ $(date +%d) = 01 ]; then MAKEMTH=Y; fi
if [ $(date +%m) = 01 ]; then MAKEYEAR=Y; fi

while [ $# -gt 0 ]; do
    case $1 in
	-h|--help) printHelp; shift;;
	-v|--verbose) VERB=Y; VERBPARM='-v'; shift;;
	-d|--debug) VERB=Y;  DEBUG=Y ; shift;;
	-m|--month) MAKEMTH=Y ; shift;;
	-y|--year) MAKEYEAR=Y ; shift;;
	--FVErc)
	    if [ $# -lt 2 ]; then 
		errorPrint "Not enough params passed for --FVErc"
	    	exit 2
	    fi
	    eval FVErc="$2"
	    if [ -e "$FVErc" ]; then
		source "$FVErc"
		FVErc="$FVErc"
		source "$FVEBINDIR"/FVEcomFncs
	    else
		errorPrint "FVErc file was not found"
	    fi
	    shift 2;
	    ;;
	*)  errorPrint "$0: error - unrecognized option $1" 1>&2; exit 1;;
    esac
done

if [ "$FVErc" = "ERROR" ]; then errorPrint "FVErc not found!"; exit 99; fi
debugPrint "Script: FVEhistPage"
debugPrint "Using FVErc from ${FVErc}"
mainLoop
