#!/bin/bash

if [ -e $HOME/.FVErc ]; then 
	source $HOME/.FVErc
	FVErc="$HOME/.FVErc"
	source "$FVEBINDIR"/FVEcomFncs
elif [ -e /etc/FVErc ]; then
	source /etc/FVErc
	FVErc="/etc/FVErc"
	source "$FVEBINDIR"/FVEcomFncs
else
	FVErc="ERROR"
fi


function printHelp() {
	echo "
		-v|--verbose
	
	--defpage

	--powerpage 
	
		--current CURRENT
		--today TODAY
		--avrg AVERAGE
		--fvestatus FVESTATUS

	--optpage
		generates optimalization page with off status for all devices
	
	--update
		updates only row with device. Not going to re-generate 
		the whole page.
    --FVErc FILE Pass full path to FVErc file
	"
	
}

function printLoadedParams() {
	echo "
	FVESTATUS=$FVESTATUS
	FVECURRENT=$FVECURRENT
	FVETODAY=$FVETODAY
	FVEAVRG=$FVEAVRG
	"
}

function genDefPage() {
	
cat > "$HTMLFILE" << EOF
<!DOCTYPE html>
<html>
<head>
<title>FVE overview</title>
<meta http-equiv="refresh" content="60">
</head>

<body>

<iframe src="$FVEHTMLPOWERNAME" width="640" height="380"></iframe>


<h3>Graphs:</h3>
<h4>Today power report:</h4>
<a href=fved.png><img src="fved.png" alt="Power today"></a>
<h4>Today power report (per phase):</h4>
<a href=fvel.png><img src="fvel.png" alt="Power today (phased)"></a>
<h4>This month power overview:</h4>
<a href=fvem.png><img src="fvem.png" alt="Power overview this month"></a>
<h4>Produced of this month:</h4>
<a href=fvep.png><img src="fvep.png" alt="Produced this month"></a>
EOF

if [ "$DIRECTTEMP" = "ON" ]; then
	echo "<h4>Today temperature:</h4>" >> "$HTMLFILE" 
	echo '</br>' >> "$HTMLFILE"
	echo '<a href=fvet.png><img src="fvet.png" alt="Today temperature flowchart"></a>' >> "$HTMLFILE" 
	echo '</br>' >> "$HTMLFILE"
fi

echo '<h3>Optimalization of consumption</h3>' >> "$HTMLFILE" 

grep -v ^\# "$OPTCFGFILE" | while read USELESS USELESS DEVICE USELESS ; do
	echo "<img src=\"fve.device.$DEVICE.png\" alt=\"Produced this month\"> " >> "$HTMLFILE"
	echo '</br>' >> "$HTMLFILE"
done

cat >> "$HTMLFILE" << EOF
<iframe src="$FVEHTMLOPTNAME" width="640" height="120"></iframe>
</body>
</html>
EOF
}

function genPowerPage() {
cat > "$HTMLPOWERFILE" << EOF
<p>Generated on `date +%d/%m/%Y,%H:%M`</p>
<h3>Current status/health: $FVESTATUS</h3>
<h3>Power now: $FVECURRENT [W] (L1: $L1, L2: $L2, L3: $L3)</h3>
<h3>Average (10m): $FVEAVRG [W]</h3>
<h3>Production today: $FVETODAY [Wh]</h3>
<h3>Devices uptime today:</h3>
EOF
grep -v ^\# "$OPTCFGFILE" | while read USELESS USELESS DEVICE USELESS ; do
	local DEVICEDATAFILE="$FVEDATADIR"/"$DEVICE"."$TIMEDATE_YYYYMM"
	local DEVICEUPTIME=$(grep "$TIMEDATE_YYYYMMDD".*1$ $DEVICEDATAFILE | sort -u | wc -l)
echo "<h4>Device: $DEVICE was today up: $DEVICEUPTIME [mins]</h4>" >> $HTMLPOWERFILE
done
[ "$DIRECTTEMP" = "ON" ] && echo "<h3>Temperature is: $TEMPERATURE</h3>" >> $HTMLPOWERFILE
}

function genOptsPage() {
	
> "$HTMLOPTFILE"

local DEVICENUM=0
local DEVICE=''

while read DEVICENAME; do
	DEVICE[$DEVICENUM]=$DEVICENAME
	((DEVICENUM++))
done < <(cat $OPTCFGFILE | grep -v ^\# | sed 's/^$//g' |awk '{print $3}' )


cat > "$HTMLOPTFILE" << EOF
<table border="0" cellpadding="6" cellspacing="0">
  <tr valign="middle" align="center">
    <th>Endpoint:</th>
EOF

for NUM in $(seq 0 $(expr $DEVICENUM - 1 )); do
	echo "    <th>${DEVICE[$NUM]}</th>" >> "$HTMLOPTFILE"
done

cat >> "$HTMLOPTFILE" << EOF
  </tr>
  <tr valign="middle" align="center">
    <td>Designed status:</td>
EOF
for NUM in $(seq 0 $(expr $DEVICENUM - 1 )); do
echo "    <td><a href=\"cgi-bin/HTFVEchange?${DEVICE[$NUM]}:on\"><img alt=${DEVICE[$NUM]} src=off.png></a></td>" >> "$HTMLOPTFILE"
done
echo '  </tr>' >> "$HTMLOPTFILE"
echo '</table>' >> "$HTMLOPTFILE"

#Run to update statusses, since the page is generated from scratch. Usually only --update is run.
FVEoptRunV2 -f --FVErc $FVErc

}

function updateTimeStamp() {
	sed -i '/<\/table>$/,$d' $HTMLOPTFILE
	echo '</table>' >> "$HTMLOPTFILE" 
	echo `date +%Y/%m/%d,%H:%M:%S` >> "$HTMLOPTFILE" 
}


function checkStatus() {
	#usage: checkStatus COMPONENT $STATUS
	#only on|off statusses are allowed
	COMPONENT="$1"
	STATUS="$2"
	
	if [ "$STATUS" != "on" -a "$STATUS" != "off" ]; then
		errorPrint "Wrong status!"
		errorPrint "Received:   $STATUS"
		errorPrint "Component: $COMPONENT"
		exit 1
	fi
}

function checkNumInput() {
	#INPUT="$1"
	#if [ `sed s/[0-9]//g` ]; then
	#	echo "Non-numeric input!"
	#	exit 2
	#fi
	return 0
}

function updateOptFile() {
	for NUM in $(seq 0 $(expr $DEVICENUM - 1 )); do
	checkStatus ${DEVICENAME[$NUM]} ${DEVICESTATUS[$NUM]}
		if [ ${DEVICESTATUS[$NUM]} = on ]; then
			sed -i s/${DEVICENAME[$NUM]}\ src=off/${DEVICENAME[$NUM]}\ src=on/g "$HTMLOPTFILE" 
			sed -i s/?${DEVICENAME[$NUM]}:off/?${DEVICENAME[$NUM]}:on/g "$HTMLOPTFILE" 
		elif [ ${DEVICESTATUS[$NUM]} = off ]; then
			sed -i s/${DEVICENAME[$NUM]}\ src=on/${DEVICENAME[$NUM]}\ src=off/g "$HTMLOPTFILE" 
			sed -i s/?${DEVICENAME[$NUM]}:on/?${DEVICENAME[$NUM]}:off/g "$HTMLOPTFILE" 			
		fi
	done
}

DEVICENUM=0
while [ $# -gt 0 ]; do
	case $1 in
		-v|--verbose) VEBROSE="Y"; shift;;
		--defpage) GENDEFPAGE=Y; shift;;
		--optpage) GENOPTPAGE=Y; shift;;
		--powerpage) GENPOWERPAGE=Y; shift;;
		--fvestatus) 
			if  [ $# -lt 2 ]; then 
				errorPrint "Not enough params passed for --fvestatus"
				exit 2
			fi
			checkNumInput "$2"
			FVESTATUS="$2"; shift 2;;
		--current) 
			if  [ $# -lt 2 ]; then 
				errorPrint "Not enough params passed for --current"
				exit 2
			fi
			checkNumInput "$2"
			FVECURRENT="$2"; shift 2;;
		--today) 
			if  [ $# -lt 2 ]; then 
				errorPrint "Not enough params passed for --today"
				exit 2
			fi
			checkNumInput "$2"
			FVETODAY="$2"; shift 2;;
		--avrg)
			if [ $# -lt 2 ]; then 
				errorPrint "Not enough params passed for --avrg"
				exit 2
			fi
			checkNumInput "$2"
			FVEAVRG="$2"; 
			shift 2;;
		--L1) 
			if [ $# -lt 2 ]; then 
				errorPrint "Not enough params passed for --L1"
				exit 2
			fi
			checkNumInput "$2"
			L1="$2"; 
			shift 2;;
		--L2) 
			if [ $# -lt 2 ]; then 
				errorPrint "Not enough params passed for --L2"
				exit 2
			fi
			checkNumInput "$2"
			L2="$2"; 
			shift 2;;
		--L3) 
			if [ $# -lt 2 ]; then 
				errorPrint "Not enough params passed for --L3"
				exit 2
			fi
			checkNumInput "$2"
			L3="$2"; 
			shift 2;;
		--device) 
			if [ $# -lt 3 ]; then 
				errorPrint "Not enough params passed for --device"
				exit 2
			fi
			DEVICENAME[$DEVICENUM]="$2"
			DEVICESTATUS[$DEVICENUM]="$3"
			((++DEVICENUM)) 
			shift 3
			;;
		--update) UPDATE=Y; shift;;
		--FVErc)
			if [ $# -lt 2 ]; then
				errorPrint "Not enough params passed for --FVErc"
				exit 2
			fi
			eval FVErc="$2"
			if [ -e "$FVErc" ]; then
				source "$FVErc"
				FVErc="$FVErc"
				source "$FVEBINDIR"/FVEcomFncs
			else
				errorPrint "FVErc file was not found"
			fi
			shift 2;
			;;
		*)  echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
	esac
done

if [ "$FVErc" = "ERROR" ]; then errorPrint "FVEgenPage: FVErc not found!"; exit 99; fi
debugPrint "Script: FVEgenPage"
debugPrint "Using FVErc from ${FVErc}"


[ "$DIRECTTEMP" = "ON" ] && TEMPERATURE="$(tail -1 $TEMPERATUREFILE | awk '{print $2}')"

if [ $# -gt 0 ]; then
	errorPrint "Unrecognized parametr(s): \"$@\""
fi

if [ $VEBROSE ]; then
	printLoadedParams
fi

if [ -z $GENDEFPAGE ] && [ -z $GENOPTPAGE ] && [ -z $GENPOWERPAGE ] && [ -z $UPDATE ]; then
	errorPrint "one of commands must be used:
	defpage,optpage,powerpage,update
	GENDEFPAGE: $GENDEFPAGE
	GENOPTPAGE: $GENOPTPAGE
	GENPOWERPAGE: $GENPOWERPAGE
	"
	exit 1
fi

if [ $GENDEFPAGE ]; then
	genDefPage
fi

if [ $GENOPTPAGE ]; then 
	genOptsPage
fi

if [ $GENPOWERPAGE ]; then
	if [ -z $FVECURRENT ] || [ -z $FVETODAY ] || [ -z $FVESTATUS ] || [ -z $FVEAVRG ] ; then
		errorPrint "--current, --today, --avrg and --fvestatus are mandatorry for --powerpage parameter"
		printLoadedParams
	else
		genPowerPage
	fi
fi
if [ $UPDATE ]; then
	updateOptFile
	updateTimeStamp
fi


