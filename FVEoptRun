#!/bin/bash

source ~/.FVErc

function debugPrint() {
	if [ $DEBUG ]; then
		echo "$1"
	fi
}
function verbPrint() {
	if [ $VERB ]; then
		echo "$1"
	fi
}

function opt() {
	#usage opt $COMPONENT $EXPECTEDSTATUS
	local COMPONENT=$1
	local EXPECTEDSTATUS=${2,,}
	
	debugPrint "COMPONENT: EXPECTEDSTATUS"
	debugPrint "$COMPONENT: $EXPECTEDSTATUS"
	if [ "$EXPECTEDSTATUS" = "on" -o  "$EXPECTEDSTATUS" = "off" ]; then
		if [ "$EXPECTEDSTATUS" = "on" ]; then
			debugPrint "Turning on"
		elif [ "$EXPECTEDSTATUS" = "off" ]; then
			debugPrint "Turning off"
		fi
		realStatus $COMPONENT $EXPECTEDSTATUS
		local STATUS=$? 
		if [ $STATUS = 0 -o "$FORCE" = "Y" ] ; then
			FVEgenPage --update --device $COMPONENT $EXPECTEDSTATUS
		fi
	else
		echo "Unknown parametr for function opt(): $@"
	fi
}

function getDeviceNumber() {
	#usage: getDeviceNumber $COMPONENT
	local COMPONENT=$1
	debugPrint "Getting device number for: $COMPONENT"
	DEVICENUM=$( grep -B1 $COMPONENT /etc/tellstick.conf | head -1 | awk '{print $NF}')
}


function checkTDstatus() {
	local TDSTATUS=`sudo service telldusd status | tr -d '!' `
	if [  "$TDSTATUS" = "telldusd is not running ... failed" ]; then
		echo "`date +%Y/%M/%d-%H:%M:%S` - Seems telldusd is down? Restarting"
		sudo service telldusd start 
		sudo service telldusd status
		echo ====
	fi
}

function realStatus(){
	#usage: getStatus $COMPONENT $STATUS
	#retval: 0 -- the status was changed
	#        1 -- OK, but status was not changed
	#        2 -- OK, but device was not recognized as part of config
	#        9 -- ERROR with telldusd

	local COMPONENT=$1
	local EXPECTEDSTATUS=$2
	local DEVICENUM=''
	getDeviceNumber $COMPONENT
	debugPrint "$COMPONENT has been found with device number $DEVICENUM"
	if [ -z $DEVICENUM ]; then
		debugPrint "Device not recognized, skipping"
		return 2
	fi
	local STATUS=$(tdtool -l | awk /$COMPONENT/'{print $NF}' | tr '[:upper:]' '[:lower:]' )
		if [ -z "$STATUS" ]; then
			verbPrint "Error in getting real status, skipping"
			return 9
		fi
		debugPrint "COMPONENT: DEVICENUM = EXPECTEDSTATUS:STATUS"
		debugPrint "$COMPONENT: $DEVICENUM = $EXPECTEDSTATUS:$STATUS"
	if [ "$STATUS" = "$EXPECTEDSTATUS" -o $FORCE = 'N' ]; then
		verbPrint "OK, nothing to change"
		return 1
	else
		if [ $FORCE = Y ]; then
			verbPrint "Forced: changing status of device #$DEVICENUM to $EXPECTEDSTATUS"
		else
			debugPrint "Changing status of device #$DEVICENUM from $STATUS to $EXPECTEDSTATUS"
		fi
		ERRMSG=$(tdtool --${EXPECTEDSTATUS,,} $DEVICENUM $VERBOUT )
		if [ "$?" != "0" ]; then
			echo "Problem with tdtool. Failed with message:"
			echo "\"$ERRMSG\""
			return 9
		else
			return 0
		fi
	fi
}

function printHelp() {
	echo -e "\nusage: `basename $0` [OPTIONS]
	-v       talky output
	--debug  tells everything it knows
	-f       force to send the on/off command despite of real status.
"
exit 0
}

function getAvrg() {
	#Will make average production in last 10 minutes (last 10 lines)
	AVRG=$(expr $(expr $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | sed ':a;N;$!ba;s/\n/ + /g')) / $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | wc -l) )	
	debugPrint "Avrg is: $AVRG"
}

function getStopVal() {
	STOPVAL=$MINCOMP
	debugPrint "STOPVAL is $STOPVAL"
}

function getStartVal() {
	STARTVAL=$(expr $MINCOMP + $(expr $MINCOMP / $FLUCPERC))
	debugPrint "STARTVAL is $STARTVAL"
}

function getStartStop() {
	if [ $AVRG -gt 1500 ]; then
		FLUCPERC=20
	else
		FLUCPERC=10
	fi
	getStartVal
	getStopVal
}

function checkParams() {
	if [ -z $DEVICE ] || [ -z $MINCOMP ] ; then 
		return 1
	fi
	if [ -z $MAXCOMP ]; then MAXCOMP=99999; fi
	
	debugPrint "Processing $DEVICE with params: $MINCOMP/$MAXCOMP"
	
	if [ $(echo $MINCOMP$MAXCOMP | sed 's/[0-9]*//g' ) ]; then 
		debugPrint "Detected non proper configuration for device $DEVICE: consumption: $MINCOMP/$MAXCOMP"
		return 1
	elif [ $MINCOMP -le 0 ] || [ $MAXCOMP -le 0 ]; then 
		debugPrint "Detected non proper configuration for device $DEVICE: consumption: $MINCOMP/$MAXCOMP"
		return 1
	fi
	if [ $MINCOMP -ge $MAXCOMP ]; then
		debugPrint "Minimal is bigger then maximal. This does not seems to be right: $MINCOMP/$MAXCOMP"
		return 1
	fi

	debugPrint "Params OK"
	return 0
}

function mainLoop() {
	grep -v ^\# "$OPTCFGFILE" | while read DEVICE MINCOMP MAXCOMP ; do
		if ( ! checkParams ); then
			continue
		fi
		getStartStop
		if [ -z $MAXCOMP ]; then MAXCOMP=99999; fi
		
		debugPrint "Device $DEVICE with params $MINCOMP/$MAXCOMP passed tests"

		if [ $STARTVAL -le $AVRG  -a  $AVRG -le $MAXCOMP ]; then
			verbPrint "Production $AVRG is IN limits ($MINCOMP/$MAXCOMP) of device $DEVICE, turning on"
			opt $DEVICE ON
		elif [ $AVRG -le $STOPVAL  -o $MAXCOMP -le $AVRG  ]; then
		#else
			verbPrint "Production $AVRG is OFF limits ($MINCOMP/$MAXCOMP) of device $DEVICE, turning off"
			opt $DEVICE OFF
		else
			#donothing
			verbPrint "For device $DEVICE production is between STARTVAL and STOPVAL: $STOPVAL < $AVRG < $STARTVAL"
			if [ $FORCE = 'Y' ]; then
				verbPrint "Forced, hence shutting down."
				opt $DEVICE OFF
			fi
		fi
	done
}

VERBOUT="2>/dev/null"
FORCE='N'

if [ "$1" = '-h' -o "$1" = "--help" ]; then
	printHelp
	exit
elif [ "$1" = "-v" ]; then
	VERB=Y
	VERBOUT=''
	shift
elif [ "$1" = "--debug" ]; then
	VERB=Y
	VERBOUT=''
	DEBUG=Y
	shift
elif [ "$1" = '-f' ]; then
	FORCE=Y
fi

getAvrg
checkTDstatus
mainLoop


exit 0
