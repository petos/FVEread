#!/bin/bash

source ~/.FVErc

function verbPrint() {
	if [ $VERB ]; then
		echo "$1"
	fi
}

function opt() {
	#usage opt $COMPONENT $EXPECTEDSTATUS
	local COMPONENT=$1
	local EXPECTEDSTATUS=${2,,}
	
	verbPrint "COMPONENT: EXPECTEDSTATUS"
	verbPrint "$COMPONENT: $EXPECTEDSTATUS"
	
	if [ "$EXPECTEDSTATUS" = "on" ]; then
		verbPrint "Turning ON"
		realStatus $COMPONENT $EXPECTEDSTATUS
		FVEgenPage --update --$COMPONENT $EXPECTEDSTATUS
	elif [ "$EXPECTEDSTATUS" = "off" ]; then
		verbPrint "Turning off"
		realStatus $COMPONENT $EXPECTEDSTATUS
		FVEgenPage --update --$COMPONENT $EXPECTEDSTATUS
	else
		echo "Unknown parametr for function opt(): $@"
	fi
}

function getDeviceNumber() {
	#usage: getDeviceNumber $COMPONENT
	local COMPONENT=$1
	verbPrint "Getting device number for: $COMPONENT"
	DEVICENUM=$( grep -B1 $COMPONENT /etc/tellstick.conf | head -1 | awk '{print $NF}')
}

function realStatus(){
	#usage: getStatus $COMPONENT $STATUS
	local COMPONENT=$1
	local EXPECTEDSTATUS=$2
	local DEVICENUM=''
	getDeviceNumber $COMPONENT
	verbPrint "$COMPONENT has been detected with device number $DEVICENUM"
	if [ -z $DEVICENUM ]; then
		verbPrint "Device not recognized, skipping"
		return 1
	fi
	local STATUS=$(tdtool -l | awk /$COMPONENT/'{print $NF}' | tr '[:upper:]' '[:lower:]' )
		verbPrint "COMPONENT: DEVICENUM = EXPECTEDSTATUS:STATUS"
		verbPrint "$COMPONENT: $DEVICENUM = $EXPECTEDSTATUS:$STATUS"
	if [ "$STATUS" = "$EXPECTEDSTATUS" ]; then
		verbPrint "OK, nothing to change"
		return 0
	else
		verbPrint "changing status of device #$DEVICENUM from $STATUS to $EXPECTEDSTATUS"
		ERRMSG=$(tdtool --${EXPECTEDSTATUS,,} $DEVICENUM $VERBOUT )
		if [ "$?" != "0" ]; then
			echo "Problem with tdtool. Failed with message:"
			echo "\"$ERRMSG\""
		fi
	fi
}

function printHelp() {
	echo -e "\nusage: `basename $0` POWER OLDPOWER(s)
 Opts:
    POWER -- Current power production. Script then will issue requested steps
    OLDPOWER(s) -- Previous power production - up to 5
"
exit 0
}

function getAvrg() {
	#Will make average production in last 10 minutes (last 10 lines)
	AVRG=$(expr $(expr $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | sed ':a;N;$!ba;s/\n/ + /g')) / $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | wc -l) )	
}

function getMinVal() {
	CURMIN=$(expr $AVRG - $(expr $AVRG / 10))
}

function getMaxVal() {
	CURMAX=$(expr $AVRG + $(expr $AVRG / 10))
}

function getMinMax() {
	getAvrg
#	getMinVal
#	getMaxVal
	verbPrint "Avrg is: $AVRG"
}

VERBOUT="2>/dev/null"

if [ "$1" = '-h' -o "$1" = "--help" ]; then
	printHelp
	exit
elif [ "$1" = "-v" ]; then
	VERB=Y
	VERBOUT=''
	shift
fi

getMinMax

cat $OPTCFGFILE | while read DEVICE MINCOMP MAXCOMP ; do
	if [ -z $DEVICE ] || [ -z $MINCOMP ] ; then continue; fi
	if [ -z $MAXCOMP ]; then MAXCOMP=99999; fi
	verbPrint "Processing $DEVICE with params: $MINCOMP/$MAXCOMP"
	if [ $MINCOMP -ge $MAXCOMP ]; then
		verbPrint "Minimal is bigger then maximal. This does not seems to be right: $MINCOMP/$MAXCOMP"
		continue
	fi
	if [ $(echo $MINCOMP$MAXCOMP | sed 's/[0-9]*//g' ) ]; then 
		verbPrint "Detected non proper configuration for device $DEVICE: consumption: $MINCOMP/$MAXCOMP"
		continue
	elif [ $MINCOMP -le 0 ] || [ $MAXCOMP -le 0 ]; then 
		verbPrint "Detected non proper configuration for device $DEVICE: consumption: $MINCOMP/$MAXCOMP"
		continue
	fi
	if [ $MINCOMP -le $AVRG  -a  $AVRG -le $MAXCOMP ]; then
		verbPrint "Device $DEVICE is with cons: $CONSUMPTION is in limits, turning on"
		opt $DEVICE ON
	else
		verbPrint "Device $DEVICE is with consumption $CONSUMPTION is in offlimits, turning off"
		opt $DEVICE OFF
	fi
done

exit 0
