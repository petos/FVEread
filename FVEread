#!/bin/bash
# shellcheck disable=SC1091
if [ -e /etc/FVErc ]; then
	source /etc/FVErc
	FVErc="/etc/FVErc"
	source "$FVEBINDIR"/FVEcomFncs
else
	FVErc="ERROR"
fi

function cleanFile() {
	debugPrint "FNC: cleanFile"
	#rm -f "$TMPDIR"/FVE.gn
	rm -f "$TMPDIR"/.fveread.lock
	rm -f "$TMPDIR"/HAAPI.json
	rm -f "$FVEAPIFILE" 
	rm -f "$FVEAPIFILE"1
}

function checkRunningStatus() {
	debugPrint "FNC: checkRunningStatus"
	if [ -e "$TMPDIR"/.fveread.lock ]; then
		if ( pgrep -F "$TMPDIR"/.fveread.lock ); then
			errorPrint "Already running, quiting."
			exit 0
		else
			debugPrint "Staled lock found, cleaning"
			rm -f "$TMPDIR"/.fveread.lock
		fi
	fi
	echo $$ > "$TMPDIR"/.fveread.lock
}

function uploadDataFTP() {
	#usage: uploadDataFTP
	if ( ! touch "$LOCALWEBSERVERPATH"/api.json ); then
		sudo chmod o+rwx "$LOCALWEBSERVERPATH"
	fi
	jq -c . "$FVEAPIFILE" > "$FVEAPIFILE"1
	sed -si -e's/True/on/g' -e's/False/off/g' "$FVEAPIFILE"1
	#mv "$FVEAPIFILE"1 "$FVEAPIFILE"

	cp -f "$FVEAPIFILE"1 "$LOCALWEBSERVERPATH" #TOHLE NECHAT
	return 0
}

function getDataViaAPI() {
	while read -r VAR HAENDPOINT ARRTIBUTETOGET; do
		local RESULT=''
		debugPrint "calling $VAR $HAENDPOINT $ARRTIBUTETOGET | tr ',' '.' | cut -d'.' -f1"
		RESULT="$( parseHAAPI "$HAENDPOINT" "$ARRTIBUTETOGET" | tr ',' '.' | cut -d'.' -f1 )"
		eval "$VAR"="$RESULT"
		debugPrint "$VAR = $RESULT"
	done < <( grep -v '^#' "$HAAPICFG" )
}

function getData() {
	debugPrint "FNC: getData"
	getDataViaAPI
	CURRENT="$( echo "$CURRENT" | cut -d'.' -f1)"
	[ "$CURRENT" ] || CURRENT=0
	[ "$CURRENT" -gt "$INSTALLEDPOWER" ] && CURRENT=0
	debugPrint "getData() Done"
}

function createAPIfile() {
	cat /dev/null > "$FVEAPIFILE"
	echo "
{
	\"time\": \"$(date --iso-8601=seconds)\",
	\"status\": \"$FVESTATUS\"
" >> "$FVEAPIFILE"
}

function mainLoop() {
	debugPrint "FNC: mainLoop"
	checkRunningStatus

	debugPrint "USEHAAPI and/or LOWHA  and/or USEHAAPITEMP and/or FVEopt is using HA"
	callHAAPI
	getData

	createAPIfile
	FVEoptRunV2 --current $CURRENT
	#Close API json file
	echo '}' >> "$FVEAPIFILE"
	uploadDataFTP
	cleanFile
}

if [ "$FVErc" = "ERROR" ]; then errorPrint "FVErc not found!"; exit 99; fi
debugPrint "SCRIPT: FVEread"
debugPrint "Using FVErc from ${FVErc}"

mainLoop
