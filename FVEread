#!/bin/bash
if [ -e ~/.FVErc ]; then 
	source ~/.FVErc
	FVErc="HOME"
	source "$FVEBINDIR"/FVEcomFncs
elif [ -e /etc/FVErc ]; then
	source /etc/FVErc
	FVErc="/etc/FVErc"
	source "$FVEBINDIR"/FVEcomFncs
else
	FVErcMSG="ERROR"
fi


function printHelp() {
	echo -e "usage: `basename $0` [OPTIONS]
 Opts:
  --help|-h   Print this help message
  -v          Talky version
  --stdout    Will not update webpage, but print just output to stdout
  --history   Generate history page also out of schedule (scheduled time is 23:58)
  
  CAUTION: this are permanent changes and must be reverted via the oposite
           command!!!
  --disable   Kick off the script out of the crontab and stop all devices in cron
  --enable    Enable the script in cron
  --off       Turn off all devices and will disable power optimalization
  --on        Will enable power optimalization
  --reconfig  Reload all config files
  --vacation START STOP
				Format: YYYY-MM-DD
"
exit 0
}

function getAvrg() {
	debugPrint "FNC: getAvrg"
	#Will make average production in last 10 minutes (last 10 lines)
	AVRG=$(expr $(expr $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | sed ':a;N;$!ba;s/\n/ + /g')) / $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | wc -l) )	
	verbPrint "Avrg is: $AVRG"
}

function getFileFromFVE() {
	debugPrint "FNC: getFileFromFVE"
	curl -u $FVEUSERNAME:$FVEPWD $FVEURL > "$TMPDIR"/FVE.$$.html 2>/dev/null 
	if [ $? != 0 ]; then
		errorPrint "Stridac neni dostupny"
		return 1
	else
		return 0
	fi
}

function cleanLine() {
	local LINE=$1
	echo $LINE | sed 's/<\/td>//g' | sed 's/&nbsp//g' | tr -d ' ' | \
	sed 's/xxx/0/g' | tr -dc '[:print:]'
}

function getCurrentPiko() {
	local iCURRENT=0
	iCURRENT=`cat "$TMPDIR"/FVE.$$.html | grep -A2 'current' | head -3 | tail -1 `
	echo `cleanLine "$iCURRENT"`
}

function getCurrent() {
	local iCURRENT=$(awk -F'"' '/var webdata_now_p = /{print $2}' "$TMPDIR"/FVE.$$.html)
	[ "$iCURRENT" ] || iCURRENT=0
	echo `cleanLine "$iCURRENT"`
}

function getCurrentLsPiko() {
	local iCURRENT=`cat "$TMPDIR"/FVE.$$.html | grep -B1 '<td width="30">&nbsp W</td>' | grep -v '<td width="30">&nbsp W</td>' | grep -v '-' | tail -"$1" | head -1`
	[ "$iCURRENT" ] || iCURRENT=0
	echo `cleanLine "$iCURRENT"`
}

function getCurrentLs() {
	echo 0
}

function getToday() {
	debugPrint "Function getToday $@"
	local iTOTALPRODUCED="$(cat "$TMPDIR"/FVE.$$.html | grep -A2 'total energy' | tail -1)"
	rawTOTALPRODUCED="$(cleanLine $iTOTALPRODUCED)"
	debugPrint "rawTOTALPRODUCED=$rawTOTALPRODUCED"
	local MIDNIGHTTOTAL="$( grep $TIMEDATE_YYYYMMDD $HISTORYFILE | head -1 | awk '{ print $8 }')"
	debugPrint "MIDNIGHTTOTAL=$MIDNIGHTTOTAL"
	[ "$MIDNIGHTTOTAL" ] || MIDNIGHTTOTAL=0
	TODAY=$(( rawTOTALPRODUCED - MIDNIGHTTOTAL ))
	verbPrint "TODAY was count as $TODAY"
	if [ ! -e "$TMPDIR"/FVE.$$.html ]; then
		errPrint "$TMPDIR/FVE.$$.html is missing"
		exit 1
	fi
	todayProduction="$(cleanLine $(cat "$TMPDIR"/FVE.$$.html | grep -A2 'daily energy' | tail -1)) "
	debugPrint "todayProduction=$todayProduction"
	[ -e "$FVEDATADIR"/lastreset.date ] || date -I'seconds' > "$FVEDATADIR"/lastreset.date
	[ "$todayProduction" = 0 ] && date -I'seconds' > "$FVEDATADIR"/lastreset.date
	LASTRESET="$(cat "$FVEDATADIR"/lastreset.date)"
}

function cleanFile() {
	debugPrint "FNC: cleanFile"
	rm -f "$TMPDIR"/FVE.$$.html
	#rm -f "$TMPDIR"/FVE.gn
	rm -f "$TMPDIR"/fved.png
	rm -f "$TMPDIR"/fvem.png
	rm -f "$TMPDIR"/fvep.png
	rm -f "$TMPDIR"/fved"$TIMEDATE_YYYYMMDD".png
	rm -f "$TMPDIR"/fvem"$TIMEDATE_YYYYMM".png
	rm -f "$TMPDIR"/fvep"$TIMEDATE_YYYYMM".png
	rm -f "$TMPDIR"/fvel"$TIMEDATE_YYYYMMDD".png
	rm -f "$TMPDIR"/fve.device.*.png
	rm -f "$TMPDIR"/.fveread.lock
}

function checkRunningStatus() {
	debugPrint "FNC: checkRunningStatus"
	if [ -e "$TMPDIR"/.fveread.lock ]; then
		if ( pgrep -F "$TMPDIR"/.fveread.lock ); then
			errorPrint "Already running, quiting."
			exit 0
		else
			debugPrint "Staled lock found, cleaning"
			rm -f "$TMPDIR"/.fveread.lock
		fi
	fi
	echo $$ > "$TMPDIR"/.fveread.lock
}


function updateProductionFile() {
	#usage: genProductionFiles 
	debugPrint "FNC: updateProductionFile"
	
	#DATE="$TIMEDATE_YYYYMMDD"

	sed -i /"$TIMEDATE_YYYYMMDD"/d $PRODUCTIONFILE
	echo "$TIMEDATE_YYYYMMDD $TODAY" >> $PRODUCTIONFILE
	
	return 0
}
 
function checkFileExist() {
	debugPrint "FNC: checkFileExist"
	if [ ! -e $HTMLFILE ]; then
		FVEgenPage --defpage --FVErc "$FVErc"
	fi
	if [ ! -e "$HTMLOPTFILE" ]; then
		FVEgenPage --optpage --FVErc "$FVErc"
	fi
	if [ `cat $HTMLOPTFILE | wc -l` -le 1 ]; then
		FVEgenPage --optpage --FVErc "$FVErc"
	fi
}

function uploadDataFTP() {
	debugPrint "FNC: uploadDataFTP"
	#usage: uploadDataFTP
	cp "$FVEAPIFILE" "$FVEAPIFILE".bckp
	jq -c . "$FVEAPIFILE" > "$FVEAPIFILE"1
	sed -si -e's/True/on/g' -e's/False/off/g' "$FVEAPIFILE"1
	mv "$FVEAPIFILE"1 "$FVEAPIFILE"
	( "$LOCALWEBSERVER" ) && sudo cp $TMPDIR/fvem.png $TMPDIR/fvel.png $TMPDIR/fve.device.*.png $TMPDIR/fved.png $TMPDIR/fvep.png $HTMLPOWERFILE $HTMLOPTFILE $HTMLFILE $TMPDIR/api.json "$LOCALWEBSERVERPATH"
	( "$LOCALWEBSERVER" ) && sudo mv "$LOCALWEBSERVERPATH"/"$FVEHTMLNAME" "$LOCALWEBSERVERPATH"/index.html
	( "$REMOTEFTPSERVER" ) && lftp -u "$FTPUSERNAME",$FTPPASSWD -e "set net:timeout 5; set net:max-retries 0; mput -O $HTMLDESTDIR $TMPDIR/fvem.png $TMPDIR/fvel.png $TMPDIR/fve.device.*.png $TMPDIR/fved.png $TMPDIR/fvep.png $HTMLPOWERFILE $HTMLOPTFILE $HTMLFILE && bye" $HTMLSERVER >> /dev/null

	if [ "$DIRECTTEMP" = "ON" ]; then 
		( "$LOCALWEBSERVER" ) && sudo cp $TMPDIR/fvet.png "$LOCALWEBSERVERPATH"
		( "$REMOTEFTPSERVER" ) && lftp -u "$FTPUSERNAME",$FTPPASSWD -e "set net:timeout 5; set net:max-retries 0;  mput -O $HTMLDESTDIR $TMPDIR/fvet.png && bye" $HTMLSERVER >> /dev/null
	fi
    debugPrint "upload data to FTP is done"
	return 0
}

function printDataStdout() {
	debugPrint "FNC: printDataStdout"
	#usage: #printDataStdout 

	echo "My FV: `date`:"
	echo "Current production [kW]  = $CURRENT  (L1: $L1, L2: $L2, L3: $L3)"
	echo "Avarage production [kW]  = $AVRG "
	echo "Today was produced [kWh] = $TODAY"
	return 0
}

function getDataViaFile() {
	if [ $? = 1 ]; then
		CURRENT="0"
		TODAY="0"
		FVESTATUS="Down/stopped"
		L1=0
		L2=0
		L3=0
		rawTOTALPRODUCED=0
		totalProduction=0
		todayProduction=0
		todayProductionLastReset="$(cat "$FVEDATADIR"/lastreset.date)"
		LASTRESET="$(cat "$FVEDATADIR"/lastreset.date)"
	else
		local i=0
		CURRENT=0
		while [ "$i" -lt 3 ]; do
			CURRENT="`getCurrent`"
			if [ "$CURRENT" = 0 ] || [ "$CURRENT" -gt "$INSTALLEDPOWER" ]; then
				debugPrint "Zero from FVE, one more try"
				sleep 5
				getFileFromFVE
			else
				break;
			fi
			i=$(( $i+1 ))
		done
		debugPrint "Current=$CURRENT"
		L1="`getCurrentLs 1`"
		L2="`getCurrentLs 2`"
		L3="`getCurrentLs 3`"
		#getToday
		FVESTATUS="Running"
	fi
}

function getDataViaAPI() {
	[ "$HAPORT" ] || HAPORT=8123
	while read -r VAR HAENDPOINT ARRTIBUTETOGET; do
		local RESULT=''
		debugPrint "calling $VAR $HAENDPOINT $ARRTIBUTETOGET | tr ',' '.' | cut -d'.' -f1"
		RESULT="$( callHAAPI "$HAENDPOINT" "$ARRTIBUTETOGET" | tr ',' '.' | cut -d'.' -f1 )"
		eval $VAR=$RESULT
	done < <( grep -v '^#' "$HAAPICFG" )
	todayProduction=$TODAY
}

function getData() {
	debugPrint "FNC: getData"
	if [ "$USEHAAPI" ] &&  ( "$USEHAAPI" ); then
		getDataViaAPI
	else
		getDataViaFile
	fi
	CURRENT="$( echo $CURRENT | cut -d'.' -f1)"
	getAvrg
	[ "$CURRENT" ] || CURRENT=0
	[ "$CURRENT" -gt "$INSTALLEDPOWER" ] && CURRENT=0
	[ "$L1" ] || L1=0
	[ "$L2" ] || L2=0
	[ "$L3" ] || L3=0
	[ "$TODAY" ] || TODAY=0
	[ "$rawTOTALPRODUCED" ] || rawTOTALPRODUCED=0
	[ "$totalProduction" ] || totalProduction=0
	[ "$todayProduction" ] || todayProduction=0
	debugPrint "getData() Done"
}

function createAPIfile() {
	> "$FVEAPIFILE"
	echo "
{
	\"time\": \"$(date --iso-8601=seconds)\",
	\"status\": \"$FVESTATUS\",
	\"power\": {
		\"current\": $CURRENT,
		\"L\": {
			\"L1\": $L1,
			\"L2\": $L2,
			\"L3\": $L3
		},
		\"today\": $TODAY,
		\"totalProduction\": $rawTOTALPRODUCED,
		\"todayProduction\": $todayProduction,
		\"todayProductionLastReset\": \"$LASTRESET\"
	}
" >> "$FVEAPIFILE"
}

function genFiles() {
	debugPrint "FNC: genFiles"
	#usage: genFiles
		echo $TIMEDATE_YYYYMMDDHHmm $CURRENT $TODAY $AVRG $L1 $L2 $L3 $rawTOTALPRODUCED >> "$HISTORYFILE"

		debugPrint "Running: FVEgenPage  --powerpage --current $CURRENT --L1 $L1 --L2 $L2 --L3 $L3 --today $TODAY --fvestatus $FVESTATUS --avrg $AVRG"  --FVErc "$FVErc"
		FVEgenPage  --powerpage --current $CURRENT --L1 $L1 --L2 $L2 --L3 $L3 --today $TODAY --fvestatus $FVESTATUS --avrg $AVRG  --FVErc "$FVErc"
		
		updateProductionFile
		
		FVEgenGraphs --all  --FVErc "$FVErc"
		if [ "$DIRECTTEMP" = "ON" ]; then
			FVEgenGraphs --temperature  --FVErc "$FVErc"
		fi
		createAPIfile
}

function disableMe() {
	crontab -l | sed  -e'/FVEread/s/^/#/g' | crontab	
}

function enableMe() {
	crontab -l | sed  -e'/FVEread/s/^#//g' | crontab
}

function onMe() {
        sed -i -e'/FVEOPTONOFF/s/"OFF"/"ON"/g' ~/.FVErc
}

function offMe() {
        sed -i -e'/FVEOPTONOFF/s/"ON"/"OFF"/g' ~/.FVErc
}

function genHist() {
	debugPrint "FNC: genHist"
	if [ `date +%H%M` = '2358' ]; then
		verbPrint "Time is 23:58, time to generate history page"
		HISTORY=Y
	fi
	if [ $HISTORY ]; then
		verbPrint "Generating history"
		FVEhistPage $VERBPARM $DEBUGPARM --FVErc "$FVErc"
	fi
}

function fixPerms() {
    #this is nasty hack, till I found proper setup of udev rules
    if $( ! getfacl /dev/gpiomem 2>/dev/null | grep -q fve ); then
        sudo chown root:fve /dev/gpiomem
        sudo chmod g+rw /dev/gpiomem
    fi
}

function mainLoop() {
	debugPrint "FNC: mainLoop"
    fixPerms
	checkRunningStatus
	getData
	
	if [ "$STDOUT" ]; then
		printDataStdout 
	else
		genFiles
		checkFileExist
		FVEoptRunV2 $VERBPARM $DEBUGPARM   --FVErc $FVErc 
		#Close API json file
		echo '}' >> "$FVEAPIFILE"
		uploadDataFTP
	fi
	genHist
	cleanFile
}

VERBPARM=''
VERB=''
HISTORY=''

while [ $# -gt 0 ]; do
	case $1 in
		-h|--help) printHelp; exit; shift;;
		--stdout) STDOUT="YES" ; shift;;
		-v|--verbose) VERB=Y; VERBPARM="-v" ; shift;;
		-d|--debug) VERB=Y; DEBUG=Y; DEBUGPARM="-d -v" ; shift;;
		--history) HISTORY=Y; shift ;;
		--disable) 
			disableMe 2>/dev/null
			FVEoptRunV2 --off --FVErc $FVErc 
			shift
			exit 0
			;;
		--enable)
			enableMe 2>/dev/null
			shift
			;;
		--off)
			offMe
			shift
			;;
		--on)
			onMe
			shift
			;;
		--vacstart)
			sed -i -e'/FVEOPTVACATION/s/"OFF"/"ON"/g' ~/.FVErc
			shift
			;;
		--vacstop) 
			sed -i -e'/FVEOPTVACATION/s/"ON"/"OFF"/g' ~/.FVErc
			shift
			;;
		--reconfig)
			rm -f "$TMPDIR"/fve*
			cleanFile
			errorPrint "Done. Please re-run the FVEread."
			exit 0
			;;
		--FVErc)
			if [ $# -lt 2 ]; then
				errorPrint "Not enough params passed for --FVErc"
				exit 2
			fi
			if [ -e "$2" ]; then
				source "$2"
				FVErc="$2"
				source "$FVEBINDIR"/FVEcomFncs
			else
				errorPrint "FVErc file was not found"
			fi
			shift 2;
			;;
		--vacation)
			if [ $# -lt 3 ]; then 
				errorPrint "Not enough params passed for --vacation"
				exit 2
			fi
			STARTDATE="$2"
			STOPDATE="$3"
			
			echo "/home/fve/FVEread/FVEread --vacstart" > "$TMPDIR"/fvevacation
			at -f "$TMPDIR"/fvevacation teatime "$STARTDATE"
			
			echo "/home/fve/FVEread/FVEread --off" > "$TMPDIR"/fvevacation
			at -f "$TMPDIR"/fvevacation teatime "$STARTDATE" + 1 minutes
			
			echo "/home/fve/FVEread/FVEread --on" > "$TMPDIR"/fvevacation
			at -f "$TMPDIR"/fvevacation teatime "$STOPDATE" - 2 days
			
			echo "/home/fve/FVEread/FVEread --vacstop" > "$TMPDIR"/fvevacation
			at -f "$TMPDIR"/fvevacation teatime "$STOPDATE"
			
			rm "$TMPDIR"/fvevacation
			exit 0
			;;
		*)  errorPrint "$0: error - unrecognized option $1" 1>&2; exit 1;;
	esac
done

if [ "$FVErc" = "ERROR" ]; then errorPrint "FVErc not found!"; exit 99; fi
debugPrint "SCRIPT: FVEread"
debugPrint "Using FVErc from ${FVErc}"

mainLoop
