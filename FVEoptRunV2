#!/bin/bash

source ~/.FVErc
source "$FVEBINDIR"/FVEcomFncs

OPTCFGFILE=$OPTCFGFILE
OPTCFGLOWFILE="$CFGDIR"/FVEoptRun.low.cfg
source $OPTCFGLOWFILE

function updateEnergy() {
	ENERGYBUCKET=$(expr $ENERGYBUCKET - $1)
	if [ "$ENERGYBUCKET" -lt 0 ]; then
		ENERGYBUCKET=0
	fi
	verbPrint "Remaining energy = $ENERGYBUCKET"
}



function printHelp() {
	echo -e "\nusage: `basename $0` [OPTIONS]
	-v         talky output
	--debug    tells everything it knows
	-f|--force force to send the on/off command despite of real status.
"
exit 0
}

function getAvrg() {
	#Will make average production in last 10 minutes (last 10 lines)

	if [ $OFF ]; then
		AVRG=0
		verbPrint "Power management disabled by config"
	else
		AVRG=$(expr $(expr $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | sed ':a;N;$!ba;s/\n/ + /g')) / $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | wc -l) )	
	fi
	verbPrint "Avrg is: $AVRG"
	ENERGYBUCKET=$AVRG
}

function checkUptime() {
	UPTIME=$(cat /proc/uptime | awk -F '.' '{print $1}')
	if [ $UPTIME -lt 660 ]; then
		echo "LOW uptime:disabled due to not enough of data"
		OFF='Y'
		FORCE='Y'
	fi
}

function getTemperature() {
	TEMPERATURE=60
	verbPrint "Temperature on thermal devices is $TEMPERATURE"
}

function getLowTarifInfo() {
	#returns if now we are in Low tarif or not and eventually what low tarif (1st part, 2nd part...)
	
	ISLOWTARIF=N
	LOWTARIFNUM=''
	local LOWTARIFN
	local TIMEDATEHHmm=$(date +%H%M)
	
	#Parse lowtarif config
	for LOWTARIFN in $(seq 0 $(expr $VALLOWTARIFS - 1)); do
		if [ ${VALLOWTARIF_STARTS[$LOWTARIFN]} -lt $TIMEDATEHHmm -a $TIMEDATEHHmm -lt ${VALLOWTARIF_STOPS[$LOWTARIFN]} ]; then
			verbPrint "Now we are in Low Tarif time: ${VALLOWTARIF_STARTS[$LOWTARIFN]} < $TIMEDATEHHmm < ${VALLOWTARIF_STOPS[$LOWTARIFN]} "
			ISLOWTARIF=Y
			LOWTARIFNUM=$LOWTARIFN
			break
		fi
	done
	debugPrint "LowTarif ID: $LOWTARIFNUM: LowTarif=$ISLOWTARIF"
}



function parseThermalDevice() {
	THERMALDEVICES=-1
	while read LNDEVICEID LNTYPE LNDEVICE LNCONSUMPTION LNTIME0 LNTIME1 LNSTARTTEMP LNSTOPTEMP ; do 
		((++THERMALDEVICES))
		debugPrint "$LNDEVICEID $LNTYPE $LNDEVICE $LNCONSUMPTION $LNTIME0 $LNTIME1 $LNSTARTTEMP $LNSTOPTEMP"
		DEVICEID[$THERMALDEVICES]=$LNDEVICEID
		TYPE["$THERMALDEVICES"]=$LNTYPE
		DEVICE["$THERMALDEVICES"]=$LNDEVICE
		CONSUMPTION["$THERMALDEVICES"]=$LNCONSUMPTION
		TIME0["$THERMALDEVICES"]=$LNTIME0
		TIME1["$THERMALDEVICES"]=$LNTIME1
		STARTTEMP["$THERMALDEVICES"]=$LNSTARTTEMP
		STOPTEMP["$THERMALDEVICES"]=$LNSTOPTEMP
	done < <( cat "$OPTCFGFILE" | grep -v \# | grep thermal)

	###TEST
	if [ $DEBUG ]; then
		for i in `seq 0 $THERMALDEVICES`; do
			echo "ID$i: ${DEVICEID[$i]}"
			echo "TYPE$i: ${TYPE["$i"]}"
			echo "NAME$i: ${DEVICE["$i"]}"
			echo "CONS$i: ${CONSUMPTION["$i"]}"
			echo "TIM1$i: ${TIME0["$i"]}"
			echo "TIM2$i: ${TIME1["$i"]}"
			echo "RTTM$i: ${STARTTEMP["$i"]}"
			echo "TPTM$i: ${STOPTEMP["$i"]}"
		done
	fi
	###ENDTEST
}

function getUptimeOfDevice() {
	local DEVICE="$1"
	local DEVICEDATAFILE="$FVEDATADIR"/"$DEVICE"."$TIMEDATE_YYYYMM"
	local DEVICEUPTIME=$(grep "$TIMEDATE_YYYYMMDD".*1$ $DEVICEDATAFILE | sort -u | wc -l)
	debugPrint "Device $DEVICE was up for $DEVICEUPTIME mins"
	return $DEVICEUPTIME
}

function thermalLowTarifNODT() {
	TIMETARIF="TIME$LOWTARIFNUM[@]"
	local LOCALDEVICEID=-1
	while read DESIREDUPTIME; do
		((++LOCALDEVICEID))
		if [ $DESIREDUPTIME -gt 0 ]; then
			debugPrint "Device ${DEVICE["$LOCALDEVICEID"]} in this lowtarif n.$LOWTARIFNUM should be up for $DESIREDUPTIME mins."
			getUptimeOfDevice ${DEVICE["$LOCALDEVICEID"]}
			local UPTIME="$?"
			if [ "$UPTIME" -lt "$DESIREDUPTIME" ]; then
				verbPrint "Device ${DEVICE["$LOCALDEVICEID"]} was up for $UPTIME mins, but required is $DESIREDUPTIME."				
				STARTSTOPDEVICES["${DEVICEID["$LOCALDEVICEID"]}"]=ON
				updateEnergy ${CONSUMPTION["$LOCALDEVICEID"]}
			else
				verbPrint "Device ${DEVICE["$LOCALDEVICEID"]} was up for $UPTIME, that is more than $DESIREDUPTIME mins, not starting now"
				STARTSTOPDEVICES["${DEVICE["$LOCALDEVICEID"]}"]=OFF
			fi
		else
			verbPrint "Device ${DEVICE["$LOCALDEVICEID"]} in this lowtarif n.$LOWTARIFNUM should not be up"
			STARTSTOPDEVICES["${DEVICE["$LOCALDEVICEID"]}"]=OFF
		fi
	done < <(echo ${!TIMETARIF} | tr ' ' '\n')
	return 0
}

function thermalLowTarifDT() {
	getTemperature

	if [ $TEMPERATURE -lt $VALLOWTARIFMINTEMP ]; then
		verbPrint "Temperature in thermal device is lower than minimum requested. $TEMPERATURE < $VALLOWTARIFMINTEMP"
		local LOCALDEVICEID=-1
		while read DEVICENAME; do
			((++LOCALDEVICEID))
			verbPrint "STARTING DEVICE $DEVICENAME"
			STARTSTOPDEVICES["${DEVICEID[$LOCALDEVICEID]}"]=ON
			updateEnergy ${CONSUMPTION["$LOCALDEVICEID"]}
		done < <( cat "$OPTCFGFILE" | grep -v \# | awk /thermal/'{print $3}' ) 
	else 
		verbPrint "Temperature in thermal device is over minimum requested. $VALLOWTARIFMINTEMP < $TEMPERATURE"
	fi
}

function manageThermalDevicesLowTarif {
	
	if [ "$ISLOWTARIF" = "Y" ]; then
	verbPrint "LowTarif time is enabled"
		if [ "$DIRECTTEMP" = "ON" ]; then
			verbPrint "DirectTemp is ON, enabling temperature-based configuration"
			thermalLowTarifDT
		elif [ "$DIRECTTEMP" = "OFF" ]; then
			verbPrint "DirectTemp is OFF, enabling time-based configuration"
			thermalLowTarifNODT
		else
			echo "Not able parse configuration, quitting"
			exit 1
		fi
	else
		verbPrint "Out of lowtarif"
	fi
}

function decideOnOff() {
	local FILTER="$1"
	
	local LOCALDEVICEID
	local LOCALCONSUMPTION
	local LOCALDEVICE
	local VOID
	local LOCSTARTTEMP
	local LOCSTOPTEMP
	local LOCALDEVICE
	
	while read LOCALDEVICEID VOID LOCALDEVICE LOCALCONSUMPTION VOID VOID LOCSTARTTEMP LOCSTOPTEMP; do
		STARTLOCALCONSUMPTION=$(expr $LOCALCONSUMPTION + $(expr $LOCALCONSUMPTION / 10))
		if [ "${STARTSTOPDEVICES["$LOCALDEVICEID"]}" = "ON" ]; then
			debugPrint "Device $LOCALDEVICE (id: $LOCALDEVICEID) is already setup to be on, skipping"
		else
			if [ $STARTLOCALCONSUMPTION -lt $ENERGYBUCKET ]; then
				if [ "$DIRECTTEMP" = "ON" -a "$FILTER" = "thermal" ]; then
					if [ "$TEMPERATURE" -lt "$LOCSTOPTEMP" ]; then
						verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID): $TEMPERATURE is lower than STOP level ($TEMPERATURE < $LOCSTOPTEMP)"
					else
						verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID): $TEMPERATURE is more than STOP level ($LOCSTOPTEMP C < $TEMPERATURE C), setting off."
						STARTSTOPDEVICES["$LOCALDEVICEID"]=OFF
						continue
					fi 
				fi
				verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID) CONS: ${LOCALCONSUMPTION} < $ENERGYBUCKET"
				STARTSTOPDEVICES["$LOCALDEVICEID"]=ON
				updateEnergy $LOCALCONSUMPTION
			elif [ $ENERGYBUCKET -lt $LOCALCONSUMPTION ]; then
				verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID) CONS: ${LOCALCONSUMPTION} > $ENERGYBUCKET"
				STARTSTOPDEVICES["$LOCALDEVICEID"]=OFF
				
				
			elif [ $LOCALCONSUMPTION -le $ENERGYBUCKET ] && [ $ENERGYBUCKET -le $STARTLOCALCONSUMPTION ] ; then
				verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID) CONS:  ${LOCALCONSUMPTION} < $ENERGYBUCKET < $STARTLOCALCONSUMPTION -- nochange" 
				local STATUS
				STATUS=$(FVEonOff --raw --getstatus $LOCALDEVICE )
				if [ $? != 0 ]; then
					echo "$LOCALDEVICE (ID:$LOCALDEVICEID) was not recognized in TelDus configuration"
					continue
				fi
				STARTSTOPDEVICES["$LOCALDEVICEID"]="$STATUS"
				if [ "${STARTSTOPDEVICES["$LOCALDEVICEID"]}" = ON ] || [ "${STARTSTOPDEVICES["$LOCALDEVICEID"]}" = on ]; then
					updateEnergy $LOCALCONSUMPTION
				fi
			else
				echo "ERR, not expected this to happens"
				echo "LOCALDEVICE=$LOCALDEVICE (ID:$LOCALDEVICEID)"
				echo "ENERGYBUCKET=$ENERGYBUCKET"
				echo "STARTLOCALCONSUMPTION=$STARTLOCALCONSUMPTION"
				echo "LOCALCONSUMPTION=$LOCALCONSUMPTION"
				echo "Stopping"
				STARTSTOPDEVICES["$LOCALDEVICEID"]=OFF
			fi
		fi
	done < <(cat "$OPTCFGFILE" | grep -v \# | grep "$FILTER" | sort -nrk4)
	return 0
}

function manageThermalDevices() {
	parseThermalDevice
	if [ "$THERMALDEVICES" = -1 ]; then
			verbPrint "No thermal device recognized, skipping"
			return 0
	fi
	manageThermalDevicesLowTarif
	
	verbPrint "Processing thermal devices. After lowtarif actions the available energy is: $ENERGYBUCKET"
	decideOnOff "thermal"
	
	return 0
}

function initDeviceTable() {
	local VOID
	debugPrint "Table STARTSTOPDEVICES[] is being initialized with values:"
	while read ID VOID DEVICENAME VOID; do
		STARTSTOPDEVICES["$ID"]=OFF
		STARTSTOPDEVICENAMES["$ID"]="$DEVICENAME"
		debugPrint "$ID: $DEVICENAME = ${STARTSTOPDEVICES["$ID"]}"
	done < <( cat "$OPTCFGFILE" | grep -v \# | sed /^$/d)
	
}

function checkDeviceTable() {
	local VOID
	verbPrint "Current status of table STARTSTOPDEVICES[]:"
	while read ID VOID DEVICENAME VOID; do
		verbPrint "$ID: $DEVICENAME = ${STARTSTOPDEVICES["$ID"]}"
	done < <( cat "$OPTCFGFILE" | grep -v \# | sed /^$/d)
}

function enableDisableDevices() {
	local VOID
	while read DEVICENUM VOID; do
		verbPrint "Device ${STARTSTOPDEVICENAMES["$DEVICENUM"]} (ID=$DEVICENUM) is being turned ${STARTSTOPDEVICES["$DEVICENUM"]}"
		FVEonOff --setstatus "${STARTSTOPDEVICENAMES["$DEVICENUM"]}" "${STARTSTOPDEVICES["$DEVICENUM"]}"
	done < <( cat "$OPTCFGFILE" | grep -v \# | sed /^$/d)
	return 0
}

function mainLoop() {
	initDeviceTable
	getLowTarifInfo
	manageThermalDevices
	decideOnOff "generic"
	enableDisableDevices
	#checkDeviceTable
}



FORCE='N'
OFF=''
VERB=''
DEBUG=''

if [ "$FVEOPTONOFF" = "OFF" ]; then
	OFF='Y'
fi

while [ $# -gt 0 ]; do
	case $1 in
		-h|--help) printHelp; shift;;
		--off) OFF='Y' ; shift;;
		-v|--verbose) VERB=Y; shift;;
		-d|--debug) VERB=Y;  DEBUG=Y ; shift;;
		-f|--force) FORCE='Y'; shift;;
		*)  echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
	esac
done

checkUptime
getAvrg

FVEonOff --init

mainLoop

FVEonOff --destroy

exit 0
