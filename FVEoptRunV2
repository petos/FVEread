#!/bin/bash

if [ -e /etc/FVErc ]; then
	source /etc/FVErc
	FVErc="/etc/FVErc"
	source "$FVEBINDIR"/FVEcomFncs
else
	FVErc="ERROR"
fi

function updateEnergy() {
	ENERGYBUCKET=$(expr $ENERGYBUCKET - $1)
	if [ "$ENERGYBUCKET" -lt 0 ]; then
		ENERGYBUCKET=0
	fi
	verbPrint "Remaining energy = $ENERGYBUCKET"
}

function getTempViaHAAPI() {
	while read -r VAR HAENDPOINT ARRTIBUTETOGET; do
		local RESULT=''
		debugPrint "parsing $VAR $HAENDPOINT $ARRTIBUTETOGET"
		RESULT="$( parseHAAPI "$HAENDPOINT" "$ARRTIBUTETOGET" | tr ',' '.' )"
		eval $VAR=$RESULT
		debugPrint "$VAR = $RESULT"
	done < <( grep -v '^#' "$HAAPICFGTEMP" )
}



function getLowViaHAAPI() {
	[ $HALOWARRTIBUTE ] || HALOWARRTIBUTE=state
	debugPrint "calling ISLOWTARIF $HALOWENDPOINT $HALOWARRTIBUTE | tr ',' '.' | cut -d'.' -f1"
	ISLOWTARIF="$( parseHAAPI "$HALOWENDPOINT" "$HALOWARRTIBUTE" | tr ',' '.' | cut -d'.' -f1 )"
	if [ "$ISLOWTARIF" = "$HALOWYES" ]; then
		ISLOWTARIF="Y"
		debugPrint "Direct HA LOW was detected"
	else
		ISLOWTARIF="N"
		debugPrint "Direct HA LOW was NOT detected"
	fi
}

function parseThermalDevice() {
	THERMALDEVICES=-1
	while read LNDEVICEID LNTYPE LNDEVICE LNCONSUMPTION LNTIME0 LNTIME1 LNSTARTTEMP LNSTOPTEMP ; do 
		((++THERMALDEVICES))
		debugPrint "$LNDEVICEID $LNTYPE $LNDEVICE $LNCONSUMPTION $LNTIME0 $LNTIME1 $LNSTARTTEMP $LNSTOPTEMP"
		if [ "$( echo "$LNSTARTTEMP" | sed -e's/[0-9]//g' )" ]; then
			debugPrint "LNSTARTTEMP is $LNSTARTTEMP contains non-numeric stuff. Expecting this to be the HA endpoint name"
			LNSTARTTEMP="$( parseHAAPI "$LNSTARTTEMP" "state" | tr ',' '.' | cut -d'.' -f1 )"
	        debugPrint "LNSTARTTEMP=$LNSTARTTEMP"
		fi
		DEVICEID[$THERMALDEVICES]=$LNDEVICEID
		TYPE["$THERMALDEVICES"]=$LNTYPE
		DEVICE["$THERMALDEVICES"]=$LNDEVICE
		CONSUMPTION["$THERMALDEVICES"]=$LNCONSUMPTION
		TIME0["$THERMALDEVICES"]=$LNTIME0
		TIME1["$THERMALDEVICES"]=$LNTIME1


		if [ "$( date +%H )" -lt 12 ]; then
			debugPrint "Setting temp -10C because it's morning"
			STARTTEMP["$THERMALDEVICES"]=$(( LNSTARTTEMP - 10 ))
		else
			if [ "$(LANG=en  date +%a)" == 'Sun' ]; then
				debugPrint "Setting temp +{$SUNDAYBOOST}C because it's Sunday"
				STARTTEMP["$THERMALDEVICES"]=$(( LNSTARTTEMP + SUNDAYBOOST ))
			else
				STARTTEMP["$THERMALDEVICES"]=$LNSTARTTEMP
			fi
		fi
		STOPTEMP["$THERMALDEVICES"]=$LNSTOPTEMP
	done < <( cat "$OPTCFGFILE" | grep -v \# | grep thermal)

	###TEST
	if [ $DEBUG ]; then
		for i in `seq 0 $THERMALDEVICES`; do
			debugPrint "ID$i: ${DEVICEID[$i]}"
			debugPrint "TYPE$i: ${TYPE["$i"]}"
			debugPrint "NAME$i: ${DEVICE["$i"]}"
			debugPrint "CONS$i: ${CONSUMPTION["$i"]}"
			debugPrint "TIM1$i: ${TIME0["$i"]}"
			debugPrint "TIM2$i: ${TIME1["$i"]}"
			debugPrint "RTTM$i: ${STARTTEMP["$i"]}"
			debugPrint "TPTM$i: ${STOPTEMP["$i"]}"
		done
	fi
	###ENDTEST
}

function thermalLowTarifDT() {
    local LOCALDEVICEID=-1
    while read DEVICENAME; do
        ((++LOCALDEVICEID))
        if (( $( echo "$TEMPERATURE < ${STARTTEMP[$LOCALDEVICEID]}" | bc -l ) )) ; then
            verbPrint "Temperature in thermal device $DEVICENAME (ID:$LOCALDEVICEID) is lower than minimum requested: ${STARTTEMP["$LOCALDEVICEID"]} < $TEMPERATURE "
			verbPrint "STARTING DEVICE $DEVICENAME"
			#updateJSONforDevices 0 "$DEVICENAME" "$LOCALDEVICEID" "${CONSUMPTION[$LOCALDEVICEID]}" "${STARTTEMP[$LOCALDEVICEID]}" "${STOPTEMP[$LOCALDEVICEID]}" "ON"
			STARTSTOPDEVICES["${DEVICEID[$LOCALDEVICEID]}"]=ON
			updateEnergy ${CONSUMPTION["$LOCALDEVICEID"]}
        else
            verbPrint "Temperature in thermal device $DEVICENAME (ID:$LOCALDEVICEID) is over minimum requested, NOT starting it. ${STARTTEMP["$LOCALDEVICEID"]} < $TEMPERATURE"
        fi
    done < <( cat "$OPTCFGFILE" | grep -v \# | awk /thermal/'{print $3}' )
}

function manageThermalDevicesLowTarif {
	
	if [ "$ISLOWTARIF" = "Y" ]; then
		verbPrint "LowTarif time is enabled"
		thermalLowTarifDT
	else
		verbPrint "Out of lowtarif"
	fi
}

function updateJSONforDevices() {
	local i="$1"
	local LOCALDEVICE="$2"
	local LOCALDEVICEID="$3"
	local LOCALCONSUMPTION="$4"
	local LOCSTARTTEMP="$5"
	local LOCSTOPTEMP="$6"

	local DEVICESTATUS=False
	local REALCONSUMPTION=0
	[ "$7" = ON ] && DEVICESTATUS=True
	[ "$7" = ON ] && REALCONSUMPTION="$LOCALCONSUMPTION"
	[ $i -gt 0 ] && echo ',' >> "$FVEAPIFILE"
	echo "
	\"$LOCALDEVICE\":
	{
		\"deviceName\": \"$LOCALDEVICE\",
		\"deviceID\": $LOCALDEVICEID,
		\"deviceConsumption\": $LOCALCONSUMPTION,
		\"startTemp\": $LOCSTARTTEMP,
		\"stopTemp\": $LOCSTOPTEMP,
		\"deviceUp\": \"$DEVICESTATUS\",
		\"realConsumption\": \"$REALCONSUMPTION\"
	}
" >> "$FVEAPIFILE"

}

function decideOnOff() {
	debugPrint "FNC: decideOnOff"
	local FILTER="$1"
	
	local LOCALDEVICEID
	local LOCALCONSUMPTION
	local LOCALDEVICE
	local VOID
	local LOCSTARTTEMP
	local LOCSTOPTEMP
	local LOCALDEVICE
	local i=-1
	while read LOCALDEVICEID VOID LOCALDEVICE LOCALCONSUMPTION VOID VOID LOCSTARTTEMP LOCSTOPTEMP; do
	((i++))
        debugPrint "LOCALDEVICEID=$LOCALDEVICEID"
        debugPrint "LOCALDEVICE=$LOCALDEVICE"
        debugPrint "LOCALCONSUMPTION=$LOCALCONSUMPTION"
        debugPrint "LOCSTARTTEMP=$LOCSTARTTEMP"
        debugPrint "LOCSTOPTEMP=$LOCSTOPTEMP"
		
		if [ "$( echo "$LOCSTARTTEMP" | sed -e's/[0-9]//g' )" ]; then
			debugPrint "LOCSTARTTEMP is $LOCSTARTTEMP contains non-numeric stuff. Expecting this to be the HA endpoint name"
			LOCSTARTTEMP="$( parseHAAPI "$LOCSTARTTEMP" "state" | tr ',' '.' | cut -d'.' -f1 )"
	        debugPrint "LOCSTARTTEMP=$LOCSTARTTEMP"
		fi
		
		STARTLOCALCONSUMPTION=$LOCALCONSUMPTION
		
		if [ "${STARTSTOPDEVICES["$LOCALDEVICEID"]}" = "ON" ]; then
			debugPrint "Device $LOCALDEVICE (id: $LOCALDEVICEID) is already setup to be on, skipping"
			updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "ON"
		else
			if [ $STARTLOCALCONSUMPTION -lt $ENERGYBUCKET ]; then
				if [ "$FILTER" = "thermal" ]; then
					if (( $( echo "$TEMPERATURE < $LOCSTOPTEMP" | bc -l ) )); then
						verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID): $TEMPERATURE is lower than STOP level ($TEMPERATURE < $LOCSTOPTEMP)"
					else
						verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID): $TEMPERATURE is more than STOP level ($LOCSTOPTEMP C < $TEMPERATURE C), setting off."
						updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "OFF"
						STARTSTOPDEVICES["$LOCALDEVICEID"]=OFF
						continue
					fi 
				fi
				verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID) CONS: ${LOCALCONSUMPTION} < $ENERGYBUCKET"
				updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "ON"
				STARTSTOPDEVICES["$LOCALDEVICEID"]=ON
				updateEnergy $LOCALCONSUMPTION
			elif [ $ENERGYBUCKET -lt $LOCALCONSUMPTION ]; then
				verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID) CONS: ${LOCALCONSUMPTION} > $ENERGYBUCKET"
				updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "OFF"
				STARTSTOPDEVICES["$LOCALDEVICEID"]=OFF
			elif [ $LOCALCONSUMPTION -le $ENERGYBUCKET ] && [ $ENERGYBUCKET -le $STARTLOCALCONSUMPTION ] ; then
				verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID) CONS:  ${LOCALCONSUMPTION} < $ENERGYBUCKET < $STARTLOCALCONSUMPTION -- nochange" 
				local STATUS
				STATUS=$(FVEonOff $VERBPARM $DEBUGPARAM --getstatus $LOCALDEVICE)
				if [ $? != 0 ]; then
					errorPrint "$LOCALDEVICE (ID:$LOCALDEVICEID) was not recognized in TelDus configuration"
					continue
				fi
				STARTSTOPDEVICES["$LOCALDEVICEID"]="$STATUS"
				updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "$STATUS"
				if [ "${STARTSTOPDEVICES["$LOCALDEVICEID"]}" = ON ] || [ "${STARTSTOPDEVICES["$LOCALDEVICEID"]}" = on ]; then
					updateEnergy $LOCALCONSUMPTION
				fi
			else
				errorPrint "ERR, not expected this to happens"
				errorPrint "LOCALDEVICE=$LOCALDEVICE (ID:$LOCALDEVICEID)"
				errorPrint "ENERGYBUCKET=$ENERGYBUCKET"
				errorPrint "STARTLOCALCONSUMPTION=$STARTLOCALCONSUMPTION"
				errorPrint "LOCALCONSUMPTION=$LOCALCONSUMPTION"
				errorPrint "Stopping"
				STARTSTOPDEVICES["$LOCALDEVICEID"]=OFF
			fi
		fi
	done < <(cat "$OPTCFGFILE" | grep -v \# | grep "$FILTER" | sort -nrk4)
	return 0
}

function manageThermalDevices() {
	
	parseThermalDevice
	
	if [ "$THERMALDEVICES" = -1 ]; then
			verbPrint "No thermal device recognized, skipping"
			return 0
	fi
	manageThermalDevicesLowTarif

	
	verbPrint "Processing thermal devices. After lowtarif actions the available energy is: $ENERGYBUCKET"
	decideOnOff "thermal"
	
	return 0
}

function initDeviceTable() {
	local VOID
	debugPrint "Table STARTSTOPDEVICES[] is being initialized with values:"
	while read ID VOID DEVICENAME VOID; do
		STARTSTOPDEVICES["$ID"]=OFF
		STARTSTOPDEVICENAMES["$ID"]="$DEVICENAME"
		debugPrint "$ID: $DEVICENAME = ${STARTSTOPDEVICES["$ID"]}"
	done < <( cat "$OPTCFGFILE" | grep -v \# | sed /^$/d)
	
}

function checkDeviceTable() {
	local VOID
	verbPrint "Current status of table STARTSTOPDEVICES[]:"
	while read ID VOID DEVICENAME VOID; do
		verbPrint "$ID: $DEVICENAME = ${STARTSTOPDEVICES["$ID"]}"
	done < <( cat "$OPTCFGFILE" | grep -v \# | sed /^$/d)
}

function enableDisableDevices() {
	local VOID
	while read DEVICENUM VOID; do
		verbPrint "Device ${STARTSTOPDEVICENAMES["$DEVICENUM"]} (ID=$DEVICENUM) is being turned ${STARTSTOPDEVICES["$DEVICENUM"]}"
		FVEonOff $DEBUGPARAM $VERBPARM --setstatus "${STARTSTOPDEVICENAMES["$DEVICENUM"]}" "${STARTSTOPDEVICES["$DEVICENUM"]}"
		#sleep 2
	done < <( cat "$OPTCFGFILE" | grep -v \# | sed /^$/d)
	return 0
}

function mainLoop() {
	initDeviceTable
	ISLOWTARIF=N
	getLowViaHAAPI

	TEMPERATURE="0.0"
	getTempViaHAAPI

	echo ', "devices": { ' >> "$FVEAPIFILE"

	manageThermalDevices
	decideOnOff "generic"
	
	echo '}' >> "$FVEAPIFILE"

	enableDisableDevices
	#checkDeviceTable
}

while [ $# -gt 0 ]; do
	case $1 in
		--current)
			if [ $# -lt 2 ]; then
				errorPrint "Not passed device parametr --current"
				exit 2
			fi
			ENERGYBUCKET="$2"
			shift 2
			;;
		*)  errorPrint "$0: error - unrecognized option $1" 1>&2; exit 1;;
	esac
done

if [ "$FVErc" = "ERROR" ]; then errorPrint "FVErc not found!"; exit 99; fi
debugPrint "SCRIPT: FVEoptRunV2"
debugPrint "Using FVErc from ${FVErc}"

mainLoop

exit 0
