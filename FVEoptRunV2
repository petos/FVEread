#!/bin/bash

if [ -e $HOME/.FVErc ]; then 
	source $HOME/.FVErc
	FVErc="$HOME/.FVErc"
	source "$FVEBINDIR"/FVEcomFncs
elif [ -e /etc/FVErc ]; then
	source /etc/FVErc
	FVErc="/etc/FVErc"
	source "$FVEBINDIR"/FVEcomFncs
else
	FVErc="ERROR"
fi

function updateEnergy() {
	ENERGYBUCKET=$(expr $ENERGYBUCKET - $1)
	if [ "$ENERGYBUCKET" -lt 0 ]; then
		ENERGYBUCKET=0
	fi
	verbPrint "Remaining energy = $ENERGYBUCKET"
}



function printHelp() {
	echo -e "\nusage: `basename $0` [OPTIONS]
	-v         talky output
	--debug    tells everything it knows
	-f|--force force to send the on/off command despite of real status.
	--FVErc FILE Pass full path to FVErc file
"
exit 0
}

function getAvrg() {
	#Will make average production in last 10 minutes (last 10 lines)	
	AVRG=$(expr $(expr $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | sed ':a;N;$!ba;s/\n/ + /g')) / $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | wc -l) )
	verbPrint "AVRG=$AVRG"
	ENERGYBUCKET=$AVRG
}

function getBucket(){
	if [ $OFF ]; then
		ENERGYBUCKET=0
		verbPrint "Power management disabled by OFF option"
	else
		if [ $USEAVRGS = "YES" ] && [ $USEAVRGS != 'no' ] && [ $USEAVRGS != 'NO' ] && [ $USEAVRGS != 'N' ]; then
			getAvrg
		else
			ENERGYBUCKET=$(tail -1 $HISTORYFILE | awk '{print $2}' )
			verbPrint "Working with direct power!"
		fi
	fi
	verbPrint "There is $ENERGYBUCKET in Bucket"
	return 0
}

function checkUptime() {
    if [ $USEAVRGS = NO ]; then
        return 0
    else
        UPTIME=$(cat /proc/uptime | awk -F '.' '{print $1}')
        if [ $UPTIME -lt 660 ]; then
            errorPrint "LOW uptime: disabled due to not enough of data"
            OFF='Y'
            FORCE='Y'
        fi
    fi
}

function getTempViaHAAPI() {
	while read -r VAR HAENDPOINT ARRTIBUTETOGET; do
		local RESULT=''
		debugPrint "parsing $VAR $HAENDPOINT $ARRTIBUTETOGET"
		RESULT="$( parseHAAPI "$HAENDPOINT" "$ARRTIBUTETOGET" | tr ',' '.' )"
		eval $VAR=$RESULT
		debugPrint "$VAR = $RESULT"
	done < <( grep -v '^#' "$HAAPICFGTEMP" )
}

function getTemperature() {
    TEMPERATURE="0.0"
	if [ "$USEHAAPITEMP" ] && ( "$USEHAAPITEMP" ); then
		getTempViaHAAPI
	else
		TEMPERATURE=$(/home/fve/FVEread/FVEgetTemp.py --ID $TOPTEMPID)
		[ "$TOPTEMPID1" ] && TEMPERATURE1=$(/home/fve/FVEread/FVEgetTemp.py --ID $TOPTEMPID1 )
	fi
   
  
    echo ", \"temperatures\":
{
" >> "$FVEAPIFILE"
    verbPrint "Temperature on thermal devices is $TEMPERATURE"
    if [ TEMPERATURE1 ]; then
        echo "$TIMEDATE_YYYYMMDDHHmm $TEMPERATURE $TEMPERATURE1" >> $TEMPERATUREFILE
	echo "\"temperature_0\": $TEMPERATURE, \"temperature_1\": $TEMPERATURE1" >> "$FVEAPIFILE"
    else
        echo "$TIMEDATE_YYYYMMDDHHmm $TEMPERATURE" >> $TEMPERATUREFILE
	echo "\"temperature_0\": $TEMPERATURE" >> "$FVEAPIFILE"
    fi
    echo "}" >> "$FVEAPIFILE"
}

function getLowViaHAAPI() {
	[ $HALOWARRTIBUTE ] || HALOWARRTIBUTE=state
	debugPrint "calling ISLOWTARIF $HALOWENDPOINT $HALOWARRTIBUTE | tr ',' '.' | cut -d'.' -f1"
	ISLOWTARIF="$( parseHAAPI "$HALOWENDPOINT" "$HALOWARRTIBUTE" | tr ',' '.' | cut -d'.' -f1 )"
	if [ "$ISLOWTARIF" = "$HALOWYES" ]; then
		ISLOWTARIF="Y"
		debugPrint "Direct HA LOW was detected"
	else
		ISLOWTARIF="N"
		debugPrint "Direct HA LOW was NOT detected"
	fi
}

function getLowTarifInfo() {
	#returns if now we are in Low tarif or not and eventually what low tarif (1st part, 2nd part...)
	
	ISLOWTARIF=N
	local LTTFVAL=False
	LOWTARIFNUM=''
	local LOWTARIFN
	local TIMEDATEHHmm=$(date +%H%M)
	

	if [ "$LOWHA" ] && ( "$LOWHA" ); then
		getLowViaHAAPI
    elif [ "$DIRECTLOW" ] && [ "$DIRECTLOW" = "ON" ]; then
        if [ "$(FVEGPIO --pin $DIRECTLOWPIN --mode get --type relay)" = "on" ]; then
            debugPrint "DirectLowTarif was detected"
            ISLOWTARIF=Y
            if [ $(date +%H) -lt 12 ]; then
                LOWTARIFNUM=0
            else
                LOWTARIFNUM=1
            fi
        else
            debugPrint "DirectLowTarif was NOT detected"
        fi
    else
        #Parse lowtarif config
        for LOWTARIFN in $(seq 0 $(expr $VALLOWTARIFS - 1)); do
            if [ ${VALLOWTARIF_STARTS[$LOWTARIFN]} -lt $TIMEDATEHHmm -a $TIMEDATEHHmm -lt ${VALLOWTARIF_STOPS[$LOWTARIFN]} ]; then
                verbPrint "Now we are in Low Tarif time: ${VALLOWTARIF_STARTS[$LOWTARIFN]} < $TIMEDATEHHmm < ${VALLOWTARIF_STOPS[$LOWTARIFN]} "
                ISLOWTARIF=Y
                LOWTARIFNUM=$LOWTARIFN
                break
            fi
        done
    fi
    debugPrint "LowTarif ID: $LOWTARIFNUM: LowTarif=$ISLOWTARIF"
    [ "$ISLOWTARIF" = "Y" ] && LTTFVAL=True
    echo ",
	\"lowTarif\": {
		\"lowTarifEnabled\": \"$LTTFVAL\"" >> "$FVEAPIFILE"
    [ "$LOWTARIFNUM" ] && echo ",\"lowTarifID\": $LOWTARIFNUM" >> "$FVEAPIFILE"
    echo '}' >> "$FVEAPIFILE"
}



function parseThermalDevice() {
	THERMALDEVICES=-1
	while read LNDEVICEID LNTYPE LNDEVICE LNCONSUMPTION LNTIME0 LNTIME1 LNSTARTTEMP LNSTOPTEMP ; do 
		((++THERMALDEVICES))
		debugPrint "$LNDEVICEID $LNTYPE $LNDEVICE $LNCONSUMPTION $LNTIME0 $LNTIME1 $LNSTARTTEMP $LNSTOPTEMP"
		if [ "$( echo "$LNSTARTTEMP" | sed -e's/[0-9]//g' )" ]; then
			debugPrint "LNSTARTTEMP is $LNSTARTTEMP contains non-numeric stuff. Expecting this to be the HA endpoint name"
			LNSTARTTEMP="$( parseHAAPI "$LNSTARTTEMP" "state" | tr ',' '.' | cut -d'.' -f1 )"
	        debugPrint "LNSTARTTEMP=$LNSTARTTEMP"
		fi
		DEVICEID[$THERMALDEVICES]=$LNDEVICEID
		TYPE["$THERMALDEVICES"]=$LNTYPE
		DEVICE["$THERMALDEVICES"]=$LNDEVICE
		CONSUMPTION["$THERMALDEVICES"]=$LNCONSUMPTION
		TIME0["$THERMALDEVICES"]=$LNTIME0
		TIME1["$THERMALDEVICES"]=$LNTIME1


		if [ "$( date +%H )" -lt 12 ]; then
			debugPrint "Setting temp -10C because it's morning"
			STARTTEMP["$THERMALDEVICES"]=$(( LNSTARTTEMP - 10 ))
		else
			if [ "$(LANG=en  date +%a)" == 'Sun' ]; then
				debugPrint "Setting temp +{$SUNDAYBOOST}C because it's Sunday"
				STARTTEMP["$THERMALDEVICES"]=$(( LNSTARTTEMP + SUNDAYBOOST ))
			else
				STARTTEMP["$THERMALDEVICES"]=$LNSTARTTEMP
			fi
		fi
		STOPTEMP["$THERMALDEVICES"]=$LNSTOPTEMP
	done < <( cat "$OPTCFGFILE" | grep -v \# | grep thermal)

	###TEST
	if [ $DEBUG ]; then
		for i in `seq 0 $THERMALDEVICES`; do
			debugPrint "ID$i: ${DEVICEID[$i]}"
			debugPrint "TYPE$i: ${TYPE["$i"]}"
			debugPrint "NAME$i: ${DEVICE["$i"]}"
			debugPrint "CONS$i: ${CONSUMPTION["$i"]}"
			debugPrint "TIM1$i: ${TIME0["$i"]}"
			debugPrint "TIM2$i: ${TIME1["$i"]}"
			debugPrint "RTTM$i: ${STARTTEMP["$i"]}"
			debugPrint "TPTM$i: ${STOPTEMP["$i"]}"
		done
	fi
	###ENDTEST
}

function getUptimeOfDevice() {
	local DEVICE="$1"
	local DEVICEDATAFILE="$FVEDATADIR"/"$DEVICE"."$TIMEDATE_YYYYMM"
	local DEVICEUPTIME=$(grep "$TIMEDATE_YYYYMMDD".*1$ $DEVICEDATAFILE | sort -u | wc -l)
	debugPrint "Device $DEVICE was up for $DEVICEUPTIME mins"
	return $DEVICEUPTIME
}

function thermalLowTarifNODT() {
	TIMETARIF="TIME$LOWTARIFNUM[@]"
	local LOCALDEVICEID=-1
	while read DESIREDUPTIME; do
		((++LOCALDEVICEID))
		
		RETVAL=$?
		if [ $RETVAL = 0 ]; then
			debugPrint "Device ${DEVICE["$LOCALDEVICEID"]} was not localy changed"
		elif [ $RETVAL = 1 ]; then
			debugPrint "Device ${DEVICE["$LOCALDEVICEID"]} was localy changed to ON"
			STARTSTOPDEVICES["${DEVICEID["$LOCALDEVICEID"]}"]=ON
			updateEnergy ${CONSUMPTION["$LOCALDEVICEID"]}
			continue
		elif [ $RETVAL = 2 ]; then
			debugPrint "Device ${DEVICE["$LOCALDEVICEID"]} was localy changed to ON"
			STARTSTOPDEVICES["${DEVICEID["$LOCALDEVICEID"]}"]=OFF
			continue
		fi
		
		if [ $DESIREDUPTIME -gt 0 ]; then
			debugPrint "Device ${DEVICE["$LOCALDEVICEID"]} in this lowtarif n.$LOWTARIFNUM should be up for $DESIREDUPTIME mins."
			getUptimeOfDevice ${DEVICE["$LOCALDEVICEID"]}
			local UPTIME="$?"
			if [ "$UPTIME" -lt "$DESIREDUPTIME" ]; then
				verbPrint "Device ${DEVICE["$LOCALDEVICEID"]} was up for $UPTIME mins, but required is $DESIREDUPTIME."				
				STARTSTOPDEVICES["${DEVICEID["$LOCALDEVICEID"]}"]=ON
				updateEnergy ${CONSUMPTION["$LOCALDEVICEID"]}
			else
				verbPrint "Device ${DEVICE["$LOCALDEVICEID"]} was up for $UPTIME, that is more than $DESIREDUPTIME mins, not starting now"
				STARTSTOPDEVICES["${DEVICE["$LOCALDEVICEID"]}"]=OFF
			fi
		else
			verbPrint "Device ${DEVICE["$LOCALDEVICEID"]} in this lowtarif n.$LOWTARIFNUM should not be up"
			STARTSTOPDEVICES["${DEVICE["$LOCALDEVICEID"]}"]=OFF
		fi
	done < <(echo ${!TIMETARIF} | tr ' ' '\n')
	return 0
}

function thermalLowTarifDT() {
    local LOCALDEVICEID=-1
    while read DEVICENAME; do
        ((++LOCALDEVICEID))
        if (( $( echo "$TEMPERATURE < ${STARTTEMP[$LOCALDEVICEID]}" | bc -l ) )) ; then
            verbPrint "Temperature in thermal device $DEVICENAME (ID:$LOCALDEVICEID) is lower than minimum requested: ${STARTTEMP["$LOCALDEVICEID"]} < $TEMPERATURE "
			verbPrint "STARTING DEVICE $DEVICENAME"
			#updateJSONforDevices 0 "$DEVICENAME" "$LOCALDEVICEID" "${CONSUMPTION[$LOCALDEVICEID]}" "${STARTTEMP[$LOCALDEVICEID]}" "${STOPTEMP[$LOCALDEVICEID]}" "ON"
			STARTSTOPDEVICES["${DEVICEID[$LOCALDEVICEID]}"]=ON
			updateEnergy ${CONSUMPTION["$LOCALDEVICEID"]}
        else
            verbPrint "Temperature in thermal device $DEVICENAME (ID:$LOCALDEVICEID) is over minimum requested, NOT starting it. ${STARTTEMP["$LOCALDEVICEID"]} < $TEMPERATURE"
        fi
    done < <( cat "$OPTCFGFILE" | grep -v \# | awk /thermal/'{print $3}' )
}

function manageThermalDevicesLowTarif {
	
	if [ "$ISLOWTARIF" = "Y" ]; then
	verbPrint "LowTarif time is enabled"
		if [ "$DIRECTTEMP" = "ON" ]; then
			verbPrint "DirectTemp is ON, enabling temperature-based configuration"
			thermalLowTarifDT
		elif [ "$DIRECTTEMP" = "OFF" ]; then
			verbPrint "DirectTemp is OFF, enabling time-based configuration"
			thermalLowTarifNODT
		else
			errorPrint "Not able parse configuration, quitting"
			exit 1
		fi
	else
		verbPrint "Out of lowtarif"
	fi
}

function updateJSONforDevices() {
	local i="$1"
	local LOCALDEVICE="$2"
	local LOCALDEVICEID="$3"
	local LOCALCONSUMPTION="$4"
	local LOCSTARTTEMP="$5"
	local LOCSTOPTEMP="$6"

	local DEVICESTATUS=False
	local REALCONSUMPTION=0
	[ "$7" = ON ] && DEVICESTATUS=True
	[ "$7" = ON ] && REALCONSUMPTION="$LOCALCONSUMPTION"
	[ $i -gt 0 ] && echo ',' >> "$FVEAPIFILE"
	echo "
	\"$LOCALDEVICE\":
	{
		\"deviceName\": \"$LOCALDEVICE\",
		\"deviceID\": $LOCALDEVICEID,
		\"deviceConsumption\": $LOCALCONSUMPTION,
		\"startTemp\": $LOCSTARTTEMP,
		\"stopTemp\": $LOCSTOPTEMP,
		\"deviceUp\": \"$DEVICESTATUS\",
		\"realConsumption\": \"$REALCONSUMPTION\"
	}
" >> "$FVEAPIFILE"

}

function decideOnOff() {
	debugPrint "FNC: decideOnOff"
	local FILTER="$1"
	
	local LOCALDEVICEID
	local LOCALCONSUMPTION
	local LOCALDEVICE
	local VOID
	local LOCSTARTTEMP
	local LOCSTOPTEMP
	local LOCALDEVICE
	local i=-1
	while read LOCALDEVICEID VOID LOCALDEVICE LOCALCONSUMPTION VOID VOID LOCSTARTTEMP LOCSTOPTEMP; do
	((i++))
        debugPrint "LOCALDEVICEID=$LOCALDEVICEID"
        debugPrint "LOCALDEVICE=$LOCALDEVICE"
        debugPrint "LOCALCONSUMPTION=$LOCALCONSUMPTION"
        debugPrint "LOCSTARTTEMP=$LOCSTARTTEMP"
        debugPrint "LOCSTOPTEMP=$LOCSTOPTEMP"
		
		if [ "$( echo "$LOCSTARTTEMP" | sed -e's/[0-9]//g' )" ]; then
			debugPrint "LOCSTARTTEMP is $LOCSTARTTEMP contains non-numeric stuff. Expecting this to be the HA endpoint name"
			LOCSTARTTEMP="$( parseHAAPI "$LOCSTARTTEMP" "state" | tr ',' '.' | cut -d'.' -f1 )"
	        debugPrint "LOCSTARTTEMP=$LOCSTARTTEMP"
		fi
		
		if [ $USEAVRGS = "YES" ] && [ $USEAVRGS != 'no' ] && [ $USEAVRGS != 'NO' ] && [ $USEAVRGS != 'N' ]; then
			STARTLOCALCONSUMPTION=$(expr $LOCALCONSUMPTION + $(expr $LOCALCONSUMPTION / 10))
		else
			STARTLOCALCONSUMPTION=$LOCALCONSUMPTION
		fi
		
		if [ "${STARTSTOPDEVICES["$LOCALDEVICEID"]}" = "ON" ]; then
			debugPrint "Device $LOCALDEVICE (id: $LOCALDEVICEID) is already setup to be on, skipping"
			updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "ON"
		else
			if [ $STARTLOCALCONSUMPTION -lt $ENERGYBUCKET ]; then
				if [ "$DIRECTTEMP" = "ON" -a "$FILTER" = "thermal" ]; then
					if (( $( echo "$TEMPERATURE < $LOCSTOPTEMP" | bc -l ) )); then
						verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID): $TEMPERATURE is lower than STOP level ($TEMPERATURE < $LOCSTOPTEMP)"
					else
						verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID): $TEMPERATURE is more than STOP level ($LOCSTOPTEMP C < $TEMPERATURE C), setting off."
						updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "OFF"
						STARTSTOPDEVICES["$LOCALDEVICEID"]=OFF
						continue
					fi 
				fi
				verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID) CONS: ${LOCALCONSUMPTION} < $ENERGYBUCKET"
				updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "ON"
				STARTSTOPDEVICES["$LOCALDEVICEID"]=ON
				updateEnergy $LOCALCONSUMPTION
			elif [ $ENERGYBUCKET -lt $LOCALCONSUMPTION ]; then
				verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID) CONS: ${LOCALCONSUMPTION} > $ENERGYBUCKET"
				updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "OFF"
				STARTSTOPDEVICES["$LOCALDEVICEID"]=OFF
				
				
			elif [ $LOCALCONSUMPTION -le $ENERGYBUCKET ] && [ $ENERGYBUCKET -le $STARTLOCALCONSUMPTION ] ; then
				verbPrint "Device $LOCALDEVICE (ID:$LOCALDEVICEID) CONS:  ${LOCALCONSUMPTION} < $ENERGYBUCKET < $STARTLOCALCONSUMPTION -- nochange" 
				local STATUS
				STATUS=$(FVEonOff $VERBPARM $DEBUGPARAM --getstatus $LOCALDEVICE --FVErc $FVErc)
				if [ $? != 0 ]; then
					errorPrint "$LOCALDEVICE (ID:$LOCALDEVICEID) was not recognized in TelDus configuration"
					continue
				fi
				STARTSTOPDEVICES["$LOCALDEVICEID"]="$STATUS"
				updateJSONforDevices "$i" "$LOCALDEVICE" "$LOCALDEVICEID" "$LOCALCONSUMPTION" "$LOCSTARTTEMP" "$LOCSTOPTEMP" "$STATUS"
				if [ "${STARTSTOPDEVICES["$LOCALDEVICEID"]}" = ON ] || [ "${STARTSTOPDEVICES["$LOCALDEVICEID"]}" = on ]; then
					updateEnergy $LOCALCONSUMPTION
				fi
			else
				errorPrint "ERR, not expected this to happens"
				errorPrint "LOCALDEVICE=$LOCALDEVICE (ID:$LOCALDEVICEID)"
				errorPrint "ENERGYBUCKET=$ENERGYBUCKET"
				errorPrint "STARTLOCALCONSUMPTION=$STARTLOCALCONSUMPTION"
				errorPrint "LOCALCONSUMPTION=$LOCALCONSUMPTION"
				errorPrint "Stopping"
				STARTSTOPDEVICES["$LOCALDEVICEID"]=OFF
			fi
		fi
	done < <(cat "$OPTCFGFILE" | grep -v \# | grep "$FILTER" | sort -nrk4)
	return 0
}

function manageThermalDevices() {
	
	parseThermalDevice
	
	if [ "$THERMALDEVICES" = -1 ]; then
			verbPrint "No thermal device recognized, skipping"
			return 0
	fi
	if [ "$FVEOPTVACATION" = "OFF" ]; then
		manageThermalDevicesLowTarif
	elif [ "$FVEOPTVACATION" = "ON" ]; then
		verbPrint "Vacation-mode enabled, no time-based on-off actions"
	else
		errorPrint "Vacation is not ON nor OFF. Perhaps not up-to-date FVErc?"
	fi
	
	verbPrint "Processing thermal devices. After lowtarif actions the available energy is: $ENERGYBUCKET"
	decideOnOff "thermal"
	
	return 0
}

function initDeviceTable() {
	local VOID
	debugPrint "Table STARTSTOPDEVICES[] is being initialized with values:"
	while read ID VOID DEVICENAME VOID; do
		STARTSTOPDEVICES["$ID"]=OFF
		STARTSTOPDEVICENAMES["$ID"]="$DEVICENAME"
		debugPrint "$ID: $DEVICENAME = ${STARTSTOPDEVICES["$ID"]}"
	done < <( cat "$OPTCFGFILE" | grep -v \# | sed /^$/d)
	
}

function checkDeviceTable() {
	local VOID
	verbPrint "Current status of table STARTSTOPDEVICES[]:"
	while read ID VOID DEVICENAME VOID; do
		verbPrint "$ID: $DEVICENAME = ${STARTSTOPDEVICES["$ID"]}"
	done < <( cat "$OPTCFGFILE" | grep -v \# | sed /^$/d)
}

function enableDisableDevices() {
	local VOID
	while read DEVICENUM VOID; do
		verbPrint "Device ${STARTSTOPDEVICENAMES["$DEVICENUM"]} (ID=$DEVICENUM) is being turned ${STARTSTOPDEVICES["$DEVICENUM"]}"
		FVEonOff $DEBUGPARAM $VERBPARM  --FVErc $FVErc --setstatus "${STARTSTOPDEVICENAMES["$DEVICENUM"]}" "${STARTSTOPDEVICES["$DEVICENUM"]}"
		#sleep 2
	done < <( cat "$OPTCFGFILE" | grep -v \# | sed /^$/d)
	return 0
}

function mainLoop() {
	initDeviceTable
	getLowTarifInfo
	if [ $DIRECTTEMP = "ON" ]; then
        TEMPERATURE=''
		getTemperature
        if [ -z $TEMPERATURE ]; then
            DIRECTTEMP=OFF
        fi
	fi
	
	echo ', "devices": { ' >> "$FVEAPIFILE"

	manageThermalDevices
	decideOnOff "generic"
	
	echo '}' >> "$FVEAPIFILE"

	enableDisableDevices
	#checkDeviceTable
}



FORCE='N'
OFF=''
VERB=''
VERBPARM=''
DEBUG=''

if [ "$FVEOPTONOFF" = "OFF" ]; then
	OFF='Y'
fi

while [ $# -gt 0 ]; do
	case $1 in
		-h|--help) printHelp; shift;;
		--off) OFF='Y' ; shift;;
		-v|--verbose) VERB=Y; VERBPARM='-v'; shift;;
		-d|--debug) VERB=Y;  DEBUG=Y ; VERBPARAM='-v'; DEBUGPARAM='--debug'; shift;;
		-f|--force) FORCE='Y'; shift;;
		--FVErc)
			if [ $# -lt 2 ]; then
				errorPrint "Not enough params passed for --FVErc"
				exit 2
			fi
			eval FVErc="$2"
			if [ -e "$FVErc" ]; then
				source "$FVErc"
				FVErc="$FVErc"
				source "$FVEBINDIR"/FVEcomFncs
			else
				errorPrint "FVErc file was not found"
			fi
			shift 2;
			;;
		*)  errorPrint "$0: error - unrecognized option $1" 1>&2; exit 1;;
	esac
done

if [ "$FVErc" = "ERROR" ]; then errorPrint "FVErc not found!"; exit 99; fi
debugPrint "SCRIPT: FVEoptRunV2"
debugPrint "Using FVErc from ${FVErc}"

OPTCFGFILE=$OPTCFGFILE
if [ -e "$CFGDIR"/FVEoptRun.low.cfg ]; then
	verbPrint "WARNING: found obsoleted configuration file."
	verbPrint "Please move all configuratoin from"
	verbPrint "$CFGDIR/FVEoptRun.low.cfg to $HOME/.FVErc"
	verbPrint "and remove file $CFGDIR/FVEoptRun.low.cfg"
	OPTCFGLOWFILE="$CFGDIR"/FVEoptRun.low.cfg
	source $OPTCFGLOWFILE
fi

checkUptime
getBucket

FVEonOff --init   --FVErc $FVErc 

mainLoop

FVEonOff --destroy   --FVErc $FVErc 

exit 0
