#!/bin/bash

source ~/.FVErc
source "$FVEBINDIR"/FVEcomFncs

OPTCFGFILE=$OPTCFGFILE.2
OPTCFGLOWFILE="$CFGDIR"/FVEoptRun.low.cfg

source $OPTCFGLOWFILE

function getDeviceNumber() {
	#usage: getDeviceNumber $COMPONENT
	local COMPONENT=$1
	debugPrint "Getting device number for: $COMPONENT"
	DEVICENUM=$( grep -B1 $COMPONENT /etc/tellstick.conf | head -1 | awk '{print $NF}')
}

function checkTDstatus() {
	local TDSTATUS=`sudo service telldusd status | tr -d '!' `
	if [  "$TDSTATUS" = "telldusd is not running ... failed" ]; then
		echo "`date +%Y/%M/%d-%H:%M:%S` - Seems telldusd is down? Restarting"
		sudo service telldusd start 
		sudo service telldusd status
		echo ====
	fi
	
	> "$TMPDIR"/FVE.statuses
	tdtool -l > "$TMPDIR"/FVE.statuses
}

function printHelp() {
	echo -e "\nusage: `basename $0` [OPTIONS]
	-v         talky output
	--debug    tells everything it knows
	-f|--force force to send the on/off command despite of real status.
"
exit 0
}

function getAvrg() {
	#Will make average production in last 10 minutes (last 10 lines)
	AVRG=$(expr $(expr $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | sed ':a;N;$!ba;s/\n/ + /g')) / $(tail -10 $HISTORYFILE | awk '{print $2}' | sed '/^$/d' | wc -l) )	
	debugPrint "Avrg is: $AVRG"
}

function checkUptime() {
	UPTIME=$(cat /proc/uptime | awk -F '.' '{print $1}')
	if [ $UPTIME -lt 660 ]; then
		OFF='Y'
		FORCE='Y'
	fi
}

function getTemperature() {
	TEMPERATURE=60
	exit 0
}

function getLowTarifInfo() {
	#returns if now we are in Low tarif or not and eventually what low tarif (1st part, 2nd part...)
	
	ISLOWTARIF=N
	LOWTARIFNUM=''
	local LOWTARIFN
	local TIMEDATEHHmm=$(date +%H%M)
	
	#Parse lowtarif config
	for LOWTARIFN in $(seq 0 $(expr $VALLOWTARIFS - 1)); do
		if [ ${VALLOWTARIF_STARTS[$LOWTARIFN]} -lt $TIMEDATEHHmm -a $TIMEDATEHHmm -lt ${VALLOWTARIF_STOPS[$LOWTARIFN]} ]; then
			verbPrint "$TIMEDATEHHmm: LowTarif=YES: $LOWTARIFN"
			ISLOWTARIF=Y
			LOWTARIFNUM=$LOWTARIFN
		fi
	done
	verbPrint "$LOWTARIFNUM: LowTarif=$ISLOWTARIF"
}



function parseThermalDevice() {
DEVICEN=-1
	while read LNDEVICEID LNTYPE LNDEVICE LNCONSUMPTION LNTIME0 LNTIME1 LNSTARTTEMP LNSTOPTEMP ; do 
	#while read LINE; do
		((++DEVICEN))
		verbPrint "$LNDEVICEID $LNTYPE $LNDEVICE $LNCONSUMPTION $LNTIME0 $LNTIME1 $LNSTARTTEMP $LNSTOPTEMP"
		DEVICEID[$DEVICEN]=$LNDEVICEID
		TYPE["$DEVICEN"]=$LNTYPE
		DEVICE["$DEVICEN"]=$LNDEVICE
		CONSUMPTION["$DEVICEN"]=$LNCONSUMPTION
		TIME0["$DEVICEN"]=$LNTIME0
		TIME1["$DEVICEN"]=$LNTIME1
		STARTTEMP["$DEVICEN"]=$LNSTARTTEMP
		STOPTEMP["$DEVICEN"]=$LNSTOPTEMP
	done < <( cat "$OPTCFGFILE" | grep thermal)

	###TEST
	if [ $DEBUG = Y ]; then
	for i in `seq 0 $DEVICEN`; do
		echo "ID$i: ${DEVICEID[$i]}"
		echo "TYPE$i: ${TYPE["$i"]}"
		echo "NAME$i: ${DEVICE["$i"]}"
		echo "CONS$i: ${CONSUMPTION["$i"]}"
		echo "TIM1$i: ${TIME0["$i"]}"
		echo "TIM2$i: ${TIME1["$i"]}"
		echo "RTTM$i: ${STARTTEMP["$i"]}"
		echo "TPTM$i: ${STOPTEMP["$i"]}"
		echo "#####"
	done
	fi
	###ENDTEST
}

function whatDevicesShouldBeUp() {
	TIMETARIF="TIME$LOWTARIFNUM[@]"
	local LOCALDEVICEID=-1
	while read UPMINS; do
		((++LOCALDEVICEID))
		if [ $UPMINS -gt 0 ]; then
			verbPrint "Device ${DEVICE["$LOCALDEVICEID"]} in this lowtarif n.$LOWTARIFNUM should be up for $UPMINS mins."
			getUptimeOfDevice
		else
			verbPrint "Device ${DEVICE["$LOCALDEVICEID"]} in this lowtarif n.$LOWTARIFNUM should not be up"
		fi
	done < <(echo ${!TIMETARIF} | tr ' ' '\n')
	return 0
}




function manageThermalDevices {
	parseThermalDevice #done
	whatDevicesShouldBeUp
	
}
function manageGeneralDevices() {
	return 0
}
function enableDisableDevices() {
	return 0
}
mainloop() {
	getLowTarifInfo #done
	manageThermalDevices
#	manageGeneralDevices
	#enableDisableDevices
	
	#~ echo DEVICEID TYPE DEVICE CONSUMPTION TIME1 TIME2 STARTTEMP STOPTEMP
	#~ while read DEVICEID TYPE DEVICE CONSUMPTION TIME1 TIME2 STARTTEMP STOPTEMP; do 
		#~ echo $DEVICEID $TYPE $DEVICE $CONSUMPTION $TIME1 $TIME2 $STARTTEMP $STOPTEMP
	#~ done < <(cat "$OPTCFGFILE" | grep ' ')
	
}



VERBOUT="2>/dev/null"
FORCE='N'
OFF=''

if [ "$FVEOPTONOFF" = "OFF" ]; then
	OFF='Y'
fi

while [ $# -gt 0 ]; do
	case $1 in
		-h|--help) printHelp; shift;;
		--off) OFF='Y' ; shift;;
		-v|--verbose) VERB=Y; VERBOUT='' ; shift;;
		-d|--debug) VERB=Y; VERBOUT=''; DEBUG=Y ; shift;;
		-f|--force) FORCE='Y'; shift;;
		*)  echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
	esac
done

checkUptime

if [ $OFF ]; then
	AVRG=0
else
	getAvrg
fi

ENERGYBUCKET=$AVRG

checkTDstatus
mainLoop


rm -f "$TMPDIR"/FVE.statuses
exit 0
