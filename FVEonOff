#!/bin/bash

if [ -e $HOME/.FVErc ]; then 
	source $HOME/.FVErc
	FVErc="$HOME/.FVErc"
	source "$FVEBINDIR"/FVEcomFncs
elif [ -e /etc/FVErc ]; then
	source /etc/FVErc
	FVErc="/etc/FVErc"
	source "$FVEBINDIR"/FVEcomFncs
else
	FVErc="ERROR"
fi

function printHelp() {
	echo -e "\nusage: `basename $0` [OPTIONS]
	-h|--help  prints this help
	-v         talky output
	
	--debug    tells everything it knows
	--force|-f Sends on/off even if the device is already in desired state
	
	--init     prepare list of devices (should be run as first command)
	--destroy  destroy list of devices (should be run when finished)
	
	--getstatus DEVICE
        Returns the status of the device DEVICE
    
	--setstatus DEVICE STATUS
	    Set the DEVICE to the STATUS. 
	    
	    STATUS must be 'on' or 'off'
	--FVErc FILE Pass full path to FVErc file
"
exit 0
}

function getDeviceNumber() {
	#usage: getDeviceNumber $COMPONENT
	local COMPONENT=$1
	debugPrint "Getting device number for: $COMPONENT"
	DEVICENUM=$( grep -B1 $COMPONENT /etc/tellstick.conf | head -1 | awk '{print $NF}')
}

#~ function checkTDstatus() {
#~ #	local TDSTATUS=`sudo service telldusd status | tr -d '!' `
#~ #	if [  "$TDSTATUS" = "telldusd is not running ... failed" ]; then
#~ #		echo "`date +%Y/%M/%d-%H:%M:%S` - Seems telldusd is down? Restarting"
#~ #		sudo service telldusd start 
#~ #		sudo service telldusd status
#~ #		echo ====
#~ #	fi
	#~ local TDPID=`ps -ef | grep -v bash | grep -v grep |  grep telldusd | awk '{print $2}'`
	#~ if [ ! "$TDPID" ]; then
		#~ errorPrint "Seems telldusd is down? Restarting"
		#~ sudo telldusd
	#~ fi
#~ }

function getTDstatuses() {
	> "$TMPDIR"/FVE.statuses
	#tdtool -l > "$TMPDIR"/FVE.statuses 
}

function initFVEonOff() {
	#checkTDstatus
	getTDstatuses
}

function uninitStatuses() {
	rm -f "$TMPDIR"/FVE.statuses
	return $?
}

function getDeviceNumber() {
	#usage: getDeviceNumber $COMPONENT
	local COMPONENT=$1
	debugPrint "Getting device number for: $COMPONENT"
	DEVICENUM=$( grep -B1 $COMPONENT /etc/tellstick.conf | head -1 | awk '{print $NF}')
}

function realStatus(){
	#usage: getStatus $COMPONENT $STATUS
	#retval: 0 -- the status was changed
	#        1 -- OK, but status was not changed
	#        2 -- OK, but device was not recognized as part of config
	#        9 -- ERROR with telldusd

	local COMPONENT="$1"
	local EXPECTEDSTATUS="$2"
	local DEVICENUM=''
	getDeviceNumber $COMPONENT
	debugPrint "$COMPONENT has been found with device number $DEVICENUM"

	if [ -z $DEVICENUM ]; then
		debugPrint "Device not recognized, skipping"
		return 2
	fi

	local STATUS=$( awk /$COMPONENT/'{print $NF}' "$TMPDIR"/FVE.statuses | tr '[:upper:]' '[:lower:]' )
	if [ -z "$STATUS" ] && [ "$FORCE" != 'Y' ]; then
		verbPrint "Error in getting real status, skipping"
		return 9
	fi
	debugPrint "$COMPONENT [$DEVICENUM] = should be: $EXPECTEDSTATUS, is $STATUS"
	if [ "$STATUS" = "$EXPECTEDSTATUS" -a "$EXPECTEDSTATUS" != 'off' -a "$FORCE" != 'Y' ]; then
		verbPrint "OK, nothing to change"
		return 1
	else
		verbPrint "Device $COMPONENT with id $DEVICENUM is being turned $EXPECTEDSTATUS"
		FVEGPIO --pin 1"$DEVICENUM" --value "$EXPECTEDSTATUS" --mode set --type relay
		#~ ERRMSG=$(tdtool --${EXPECTEDSTATUS,,} $DEVICENUM $VERBOUT )
		#~ if [ "$?" != "0" ]; then
			#~ errorPrint "Problem with tdtool. Failed with message:"
			#~ errorPrint "\"$ERRMSG\""
			#~ return 9
		#~ else
			#~ verbPrint "$ERRMSG"
			#~ return 0
		#~ fi
	fi
}

function opt() {
	#usage opt $COMPONENT $EXPECTEDSTATUS
	local COMPONENT=$1
	local EXPECTEDSTATUS=${2,,}
	
	debugPrint "$COMPONENT: should be $EXPECTEDSTATUS"
	if [ "$EXPECTEDSTATUS" = "on" -o  "$EXPECTEDSTATUS" = "off" ]; then
		debugPrint "Turning $EXPECTEDSTATUS"

		realStatus $COMPONENT $EXPECTEDSTATUS
		local STATUS=$? 
		if [ $STATUS = 0 -o "$FORCE" = "Y" ] ; then
			FVEgenPage --FVErc $FVErc --update --device $COMPONENT $EXPECTEDSTATUS
		fi
	else
		errorPrint "Unknown parametr for function opt(): $@"
	fi
	if [ "$EXPECTEDSTATUS" = "on" ]; then EXPECTEDSTATUSBINARY=1; else EXPECTEDSTATUSBINARY=0; fi
	echo $TIMEDATE_YYYYMMDDHHmm $EXPECTEDSTATUSBINARY >> $FVEDATADIR/$COMPONENT."$TIMEDATE_YYYYMM"
}

function mainSetLoop() {
	for i in `seq 0 $DEVICESTOTALNUM`; do
		opt ${DEVICENAME[$i]} ${DEVICESTATUS[$i]}
	done
	return 0
}

function mainGetLoop() {
	if [ ! -e "$TMPDIR"/FVE.statuses ]; then
		getTDstatuses
	fi
	if [ $(grep "$DEVICENAMEGET" "$TMPDIR"/FVE.statuses | wc -l) -lt 1 ]; then
		verbPrint "Not albe to get status for device $DEVICENAME"
		exit 99
	elif [ $(grep "$DEVICENAMEGET" "$TMPDIR"/FVE.statuses | wc -l) -gt 1 ]; then
		verbPrint "Not albe to get unique status for device $DEVICENAME"
		exit 99
	fi
	echo $( awk /$DEVICENAMEGET/'{print $NF}' "$TMPDIR"/FVE.statuses | tr '[:upper:]' '[:lower:]' )
	return 0
}

FORCE=''
VERBOUT="2>/dev/null"
DEVICESTOTALNUM=-1
while [ $# -gt 0 ]; do
	case $1 in
		-h|--help) printHelp; shift;;
		-v|--verbose) VERB=Y; VERBOUT='' ; shift;;
		-d|--debug) VERB=Y; VERBOUT=''; DEBUG=Y ; shift;;
		-f|--force) FORCE='Y'; shift;;
		--setstatus) 
			if [ $# -lt 3 ]; then 
				errorPrint "Not enough params passed for --device $2"
				exit 2
			fi
			if [ "${3,,}" != 'on' -a "${3,,}" != 'off' -a "${3,,}" != 'notd' ] ; then
				errorPrint "3rd parametr may be only 'on/ON' or 'off/OFF'. Passed '$3' for device $2"
				exit 3
			fi
			((++DEVICESTOTALNUM))
			DEVICENAME[$DEVICESTOTALNUM]="$2"
			DEVICESTATUS[$DEVICESTOTALNUM]="${3,,}"
			TYPE="SET"
			shift 3
			;;
		--getstatus)
			if [ $# -lt 2 ]; then 
				errorPrint "Not passed device parametr --getstatus"
				exit 2
			fi
			DEVICENAMEGET="$2"
			TYPE="GET"
			shift 2
			;;
		--init) initFVEonOff; exit 0;;
		--destroy) uninitStatuses ;exit 0;;
		--FVErc)
			if [ $# -lt 2 ]; then 
				errorPrint "Not enough params passed for --FVErc"
				exit 2
			fi
			eval FVErc="$2"
			if [ -e "$FVErc" ]; then
				source "$FVErc"
				FVErc="$FVErc"
				source "$FVEBINDIR"/FVEcomFncs
			else
				errorPrint "FVErc file was not found"
			fi
			shift 2;
			;;
		*)  errorPrint "$0: error - unrecognized option $1" 1>&2; exit 1;;
	esac
done


if [ "$FVErc" = "ERROR" ]; then errorPrint "FVErc not found!"; exit 99; fi
debugPrint "SCRIPT: FVEonOff"
debugPrint "Using FVErc from ${FVErc}"

if [ "$ALWAYSFORCE" = 'Y' ]; then
    FORCE='Y'
    debugPrint "Setting FORCE=Y since ALWAYSFORCE is set to true"
fi

if [ "$TYPE" = "SET" ]; then
	mainSetLoop
elif [ "$TYPE" = "GET" ]; then
	mainGetLoop
else
	errorPrint "No TYPE recognized"
	exit 0
fi


