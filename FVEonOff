#!/bin/bash

if [ -e /etc/FVErc ]; then
	source /etc/FVErc
	FVErc="/etc/FVErc"
	source "$FVEBINDIR"/FVEcomFncs
else
	FVErc="ERROR"
fi

function getDeviceNumber() {
	#usage: getDeviceNumber $COMPONENT
	local COMPONENT=$1
	debugPrint "Getting device number for: $COMPONENT"
	DEVICENUM=$( grep -B1 $COMPONENT /etc/tellstick.conf | head -1 | awk '{print $NF}')
}

function opt() {
	#usage opt $COMPONENT $EXPECTEDSTATUS
	local COMPONENT=$1
	local EXPECTEDSTATUS=${2,,}
	
	debugPrint "$COMPONENT: should be $EXPECTEDSTATUS"
	if [ "$EXPECTEDSTATUS" = "on" -o  "$EXPECTEDSTATUS" = "off" ]; then
		if [ "$EXPECTEDSTATUS" = "on" ]; then 
			EXPECTEDSTATUSBINARY=1; 
		else 
			EXPECTEDSTATUSBINARY=0; 
		fi
		echo $TIMEDATE_YYYYMMDDHHmm $EXPECTEDSTATUSBINARY >> $FVEDATADIR/$COMPONENT."$TIMEDATE_YYYYMM"
	else
		errorPrint "Unknown parametr for function opt(): $@"
	fi
}

function mainSetLoop() {
	for i in `seq 0 $DEVICESTOTALNUM`; do
		opt "${DEVICENAME[$i]}" "${DEVICESTATUS[$i]}"
	done
	return 0
}

function mainGetLoop() {
	if [ ! -e "$TMPDIR"/FVE.statuses ]; then
		getTDstatuses
	fi
	if [ "$(grep -c "$DEVICENAMEGET" "$TMPDIR"/FVE.statuses )" -lt 1 ]; then
		verbPrint "Not albe to get status for device $DEVICENAME"
		exit 99
	elif [ "$(grep -c "$DEVICENAMEGET" "$TMPDIR"/FVE.statuses )" -gt 1 ]; then
		verbPrint "Not albe to get unique status for device $DEVICENAME"
		exit 99
	fi
	awk /"$DEVICENAMEGET"/'{print $NF}' "$TMPDIR"/FVE.statuses | tr '[:upper:]' '[:lower:]'
	return 0
}

FORCE=''
VERBOUT="2>/dev/null"
DEVICESTOTALNUM=-1
while [ $# -gt 0 ]; do
	case $1 in
		--setstatus) 
			if [ $# -lt 3 ]; then 
				errorPrint "Not enough params passed for --device $2"
				exit 2
			fi
			if [ "${3,,}" != 'on' ] && [ "${3,,}" != 'off' ] && [ "${3,,}" != 'notd' ] ; then
				errorPrint "3rd parametr may be only 'on/ON' or 'off/OFF'. Passed '$3' for device $2"
				exit 3
			fi
			((++DEVICESTOTALNUM))
			DEVICENAME[$DEVICESTOTALNUM]="$2"
			DEVICESTATUS[$DEVICESTOTALNUM]="${3,,}"
			TYPE="SET"
			shift 3
			;;
		--getstatus)
			if [ $# -lt 2 ]; then 
				errorPrint "Not passed device parametr --getstatus"
				exit 2
			fi
			DEVICENAMEGET="$2"
			TYPE="GET"
			shift 2
			;;
		*)  errorPrint "$0: error - unrecognized option $1" 1>&2; exit 1;;
	esac
done


if [ "$FVErc" = "ERROR" ]; then errorPrint "FVErc not found!"; exit 99; fi
debugPrint "SCRIPT: FVEonOff"
debugPrint "Using FVErc from ${FVErc}"

if [ "$ALWAYSFORCE" = 'Y' ]; then
    FORCE='Y'
    debugPrint "Setting FORCE=Y since ALWAYSFORCE is set to true"
fi

if [ "$TYPE" = "SET" ]; then
	mainSetLoop
elif [ "$TYPE" = "GET" ]; then
	mainGetLoop
else
	errorPrint "No TYPE recognized"
	exit 0
fi


